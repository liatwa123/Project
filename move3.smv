MODULE main
/--move matchsticks, 2 digits, no solution, operator - minus, number of matchsticks to move = 5--/
        
				/--state variables--/
				VAR
				num_move:0..42;
               
				digits: array 0..2 of array 0..1 of 0..9;
		
				xor_arr:array 0..2 of array 0..1 of array 0..6 of boolean;
		
				state:{initial, calc_cons, correct, guess};
        
				num_match_beg: 0..42;
				num_match_end: 0..42;
		
        
				DEFINE
				/--7-segment representation array--/
				digit_bool:=[[TRUE,TRUE,TRUE,TRUE,TRUE,FALSE,TRUE],[FALSE,FALSE,FALSE,TRUE,TRUE,FALSE,FALSE],[TRUE,FALSE,TRUE,TRUE,FALSE,TRUE,TRUE],[FALSE,FALSE,TRUE,TRUE,TRUE,TRUE,TRUE],[FALSE,TRUE,FALSE,TRUE,TRUE,TRUE,FALSE],[FALSE,TRUE,TRUE,FALSE,TRUE,TRUE,TRUE],[TRUE,TRUE,TRUE,FALSE,TRUE,TRUE,TRUE],[FALSE,FALSE,TRUE,TRUE,TRUE,FALSE,FALSE],[TRUE,TRUE,TRUE,TRUE,TRUE,TRUE,TRUE],[FALSE,TRUE,TRUE,TRUE,TRUE,TRUE,TRUE]];
        
				/--user input--/
				/--the initial numbers, every subarray represents a 2-digits number--/
				init_digs := [[8,8],[8,8],[8,8]];
				/--numbers' boolean segment representation--/
				init_xor := [[[TRUE,TRUE,TRUE,TRUE,TRUE,TRUE,TRUE], [TRUE,TRUE,TRUE,TRUE,TRUE,TRUE,TRUE]], [[TRUE,TRUE,TRUE,TRUE,TRUE,TRUE,TRUE], [TRUE,TRUE,TRUE,TRUE,TRUE,TRUE,TRUE]], [[TRUE,TRUE,TRUE,TRUE,TRUE,TRUE,TRUE], [TRUE,TRUE,TRUE,TRUE,TRUE,TRUE,TRUE]]];
				num_allowed:=5;
				/--end-input--/
		
				ASSIGN
		
				init(digits):=init_digs;
				init(xor_arr):=init_xor;
				init(state):=initial;
				
				/--counting the initial number of matchsticks--/
		
				init(num_match_beg):=count(init_xor[0][0][0]) + count(init_xor[0][0][1]) + count(init_xor[0][0][2]) + count(init_xor[0][0][3]) + count(init_xor[0][0][4]) + count(init_xor[0][0][5]) + count(init_xor[0][0][6]) + count(init_xor[0][1][0]) + count(init_xor[0][1][1]) + count(init_xor[0][1][2]) + count(init_xor[0][1][3]) + count(init_xor[0][1][4]) + count(init_xor[0][1][5]) + count(init_xor[0][1][6]) + count(init_xor[1][0][0]) + count(init_xor[1][0][1]) + count(init_xor[1][0][2]) + count(init_xor[1][0][3]) + count(init_xor[1][0][4]) + count(init_xor[1][0][5]) + count(init_xor[1][0][6]) + count(init_xor[1][1][0]) + count(init_xor[1][1][1]) + count(init_xor[1][1][2]) + count(init_xor[1][1][3]) + count(init_xor[1][1][4]) + count(init_xor[1][1][5]) + count(init_xor[1][1][6]) + count(init_xor[2][0][0]) + count(init_xor[2][0][1]) + count(init_xor[2][0][2]) + count(init_xor[2][0][3]) + count(init_xor[2][0][4]) + count(init_xor[2][0][5]) + count(init_xor[2][0][6]) + count(init_xor[2][1][0]) + count(init_xor[2][1][1]) + count(init_xor[2][1][2]) + count(init_xor[2][1][3]) + count(init_xor[2][1][4]) + count(init_xor[2][1][5]) + count(init_xor[2][1][6]);

				init(num_match_end):=0;
				init(num_move):=0;
		
				next(state):=case
				state = initial: guess;
				state = calc_cons & num_move = 2*num_allowed & num_match_beg = num_match_end & digits[0][0] * 10 + digits[0][1] * 1  - ( digits[1][0] * 10 + digits[1][1] * 1  ) = digits[2][0] * 10 + digits[2][1] * 1: correct;
				state = calc_cons & !(num_move = 2*num_allowed & num_match_beg = num_match_end & digits[0][0] * 10 + digits[0][1] * 1  - ( digits[1][0] * 10 + digits[1][1] * 1  ) = digits[2][0] * 10 + digits[2][1] * 1): guess;
				state = correct: correct;
				TRUE: calc_cons;
				esac;
		
				next(num_match_beg):=num_match_beg;
				
				/--counting the final number of matchsticks--/
				
				next(num_match_end):=count(digit_bool[digits[0][0]][0]) + count(digit_bool[digits[0][0]][1]) + count(digit_bool[digits[0][0]][2]) + count(digit_bool[digits[0][0]][3]) + count(digit_bool[digits[0][0]][4]) + count(digit_bool[digits[0][0]][5]) + count(digit_bool[digits[0][0]][6]) + count(digit_bool[digits[0][1]][0]) + count(digit_bool[digits[0][1]][1]) + count(digit_bool[digits[0][1]][2]) + count(digit_bool[digits[0][1]][3]) + count(digit_bool[digits[0][1]][4]) + count(digit_bool[digits[0][1]][5]) + count(digit_bool[digits[0][1]][6]) + count(digit_bool[digits[1][0]][0]) + count(digit_bool[digits[1][0]][1]) + count(digit_bool[digits[1][0]][2]) + count(digit_bool[digits[1][0]][3]) + count(digit_bool[digits[1][0]][4]) + count(digit_bool[digits[1][0]][5]) + count(digit_bool[digits[1][0]][6]) + count(digit_bool[digits[1][1]][0]) + count(digit_bool[digits[1][1]][1]) + count(digit_bool[digits[1][1]][2]) + count(digit_bool[digits[1][1]][3]) + count(digit_bool[digits[1][1]][4]) + count(digit_bool[digits[1][1]][5]) + count(digit_bool[digits[1][1]][6]) + count(digit_bool[digits[2][0]][0]) + count(digit_bool[digits[2][0]][1]) + count(digit_bool[digits[2][0]][2]) + count(digit_bool[digits[2][0]][3]) + count(digit_bool[digits[2][0]][4]) + count(digit_bool[digits[2][0]][5]) + count(digit_bool[digits[2][0]][6]) + count(digit_bool[digits[2][1]][0]) + count(digit_bool[digits[2][1]][1]) + count(digit_bool[digits[2][1]][2]) + count(digit_bool[digits[2][1]][3]) + count(digit_bool[digits[2][1]][4]) + count(digit_bool[digits[2][1]][5]) + count(digit_bool[digits[2][1]][6]);
				
				/--counting the number of changes in the matchsticks' locations--/
		
				next(num_move):=case
				state = guess: count(next(xor_arr[0][0][0])) + count(next(xor_arr[0][0][1])) + count(next(xor_arr[0][0][2])) + count(next(xor_arr[0][0][3])) + count(next(xor_arr[0][0][4])) + count(next(xor_arr[0][0][5])) + count(next(xor_arr[0][0][6])) + count(next(xor_arr[0][1][0])) + count(next(xor_arr[0][1][1])) + count(next(xor_arr[0][1][2])) + count(next(xor_arr[0][1][3])) + count(next(xor_arr[0][1][4])) + count(next(xor_arr[0][1][5])) + count(next(xor_arr[0][1][6])) + count(next(xor_arr[1][0][0])) + count(next(xor_arr[1][0][1])) + count(next(xor_arr[1][0][2])) + count(next(xor_arr[1][0][3])) + count(next(xor_arr[1][0][4])) + count(next(xor_arr[1][0][5])) + count(next(xor_arr[1][0][6])) + count(next(xor_arr[1][1][0])) + count(next(xor_arr[1][1][1])) + count(next(xor_arr[1][1][2])) + count(next(xor_arr[1][1][3])) + count(next(xor_arr[1][1][4])) + count(next(xor_arr[1][1][5])) + count(next(xor_arr[1][1][6])) + count(next(xor_arr[2][0][0])) + count(next(xor_arr[2][0][1])) + count(next(xor_arr[2][0][2])) + count(next(xor_arr[2][0][3])) + count(next(xor_arr[2][0][4])) + count(next(xor_arr[2][0][5])) + count(next(xor_arr[2][0][6])) + count(next(xor_arr[2][1][0])) + count(next(xor_arr[2][1][1])) + count(next(xor_arr[2][1][2])) + count(next(xor_arr[2][1][3])) + count(next(xor_arr[2][1][4])) + count(next(xor_arr[2][1][5])) + count(next(xor_arr[2][1][6]));
				TRUE: num_move;
				esac;
				
				/--finding the location changes by using a xor array, every 'true' value represents an added or removed matchstick--/ 
		
				next(xor_arr[0][0][0]):=case
				next(state)=calc_cons:(init_xor[0][0][0])xor(digit_bool[digits[0][0]][0]);
				TRUE:xor_arr[0][0][0];
				esac;
        
				next(xor_arr[0][0][1]):=case
                		next(state)=calc_cons:(init_xor[0][0][1])xor(digit_bool[digits[0][0]][1]);
                		TRUE:xor_arr[0][0][1];
                		esac;
                
                		next(xor_arr[0][0][2]):=case
                		next(state)=calc_cons:(init_xor[0][0][2])xor(digit_bool[digits[0][0]][2]);
                		TRUE:xor_arr[0][0][2];
                		esac;
                
                		next(xor_arr[0][0][3]):=case
                		next(state)=calc_cons:(init_xor[0][0][3])xor(digit_bool[digits[0][0]][3]);
                		TRUE:xor_arr[0][0][3];
                		esac;
                
                		next(xor_arr[0][0][4]):=case
                		next(state)=calc_cons:(init_xor[0][0][4])xor(digit_bool[digits[0][0]][4]);
                		TRUE:xor_arr[0][0][4];
                		esac;
                
                		next(xor_arr[0][0][5]):=case
                		next(state)=calc_cons:(init_xor[0][0][5])xor(digit_bool[digits[0][0]][5]);
                		TRUE:xor_arr[0][0][5];
                		esac;
                
                		next(xor_arr[0][0][6]):=case
                		next(state)=calc_cons:(init_xor[0][0][6])xor(digit_bool[digits[0][0]][6]);
                		TRUE:xor_arr[0][0][6];
                		esac;
                
                		next(xor_arr[0][1][0]):=case
                		next(state)=calc_cons:(init_xor[0][1][0])xor(digit_bool[digits[0][1]][0]);
                		TRUE:xor_arr[0][1][0];
                		esac;
                
                		next(xor_arr[0][1][1]):=case
                		next(state)=calc_cons:(init_xor[0][1][1])xor(digit_bool[digits[0][1]][1]);
                		TRUE:xor_arr[0][1][1];
                		esac;
                
                		next(xor_arr[0][1][2]):=case
                		next(state)=calc_cons:(init_xor[0][1][2])xor(digit_bool[digits[0][1]][2]);
                		TRUE:xor_arr[0][1][2];
                		esac;
                
                		next(xor_arr[0][1][3]):=case
                		next(state)=calc_cons:(init_xor[0][1][3])xor(digit_bool[digits[0][1]][3]);
                		TRUE:xor_arr[0][1][3];
                		esac;
                
                		next(xor_arr[0][1][4]):=case
                		next(state)=calc_cons:(init_xor[0][1][4])xor(digit_bool[digits[0][1]][4]);
                		TRUE:xor_arr[0][1][4];
                		esac;
                
                		next(xor_arr[0][1][5]):=case
                		next(state)=calc_cons:(init_xor[0][1][5])xor(digit_bool[digits[0][1]][5]);
                		TRUE:xor_arr[0][1][5];
                		esac;
                
                		next(xor_arr[0][1][6]):=case
                		next(state)=calc_cons:(init_xor[0][1][6])xor(digit_bool[digits[0][1]][6]);
                		TRUE:xor_arr[0][1][6];
                		esac;
                
                		next(xor_arr[1][0][0]):=case
                		next(state)=calc_cons:(init_xor[1][0][0])xor(digit_bool[digits[1][0]][0]);
                		TRUE:xor_arr[1][0][0];
                		esac;
                
                		next(xor_arr[1][0][1]):=case
                		next(state)=calc_cons:(init_xor[1][0][1])xor(digit_bool[digits[1][0]][1]);
                		TRUE:xor_arr[1][0][1];
                		esac;
                
                		next(xor_arr[1][0][2]):=case
                		next(state)=calc_cons:(init_xor[1][0][2])xor(digit_bool[digits[1][0]][2]);
                		TRUE:xor_arr[1][0][2];
                		esac;
                
                		next(xor_arr[1][0][3]):=case
                		next(state)=calc_cons:(init_xor[1][0][3])xor(digit_bool[digits[1][0]][3]);
                		TRUE:xor_arr[1][0][3];
                		esac;
                
                		next(xor_arr[1][0][4]):=case
                		next(state)=calc_cons:(init_xor[1][0][4])xor(digit_bool[digits[1][0]][4]);
                		TRUE:xor_arr[1][0][4];
                		esac;
                
                		next(xor_arr[1][0][5]):=case
                		next(state)=calc_cons:(init_xor[1][0][5])xor(digit_bool[digits[1][0]][5]);
                		TRUE:xor_arr[1][0][5];
                		esac;
                
                		next(xor_arr[1][0][6]):=case
                		next(state)=calc_cons:(init_xor[1][0][6])xor(digit_bool[digits[1][0]][6]);
                		TRUE:xor_arr[1][0][6];
                		esac;
                
                		next(xor_arr[1][1][0]):=case
                		next(state)=calc_cons:(init_xor[1][1][0])xor(digit_bool[digits[1][1]][0]);
                		TRUE:xor_arr[1][1][0];
                		esac;
                
                		next(xor_arr[1][1][1]):=case
                		next(state)=calc_cons:(init_xor[1][1][1])xor(digit_bool[digits[1][1]][1]);
                		TRUE:xor_arr[1][1][1];
                		esac;
                
                		next(xor_arr[1][1][2]):=case
                		next(state)=calc_cons:(init_xor[1][1][2])xor(digit_bool[digits[1][1]][2]);
                		TRUE:xor_arr[1][1][2];
                		esac;
                
                		next(xor_arr[1][1][3]):=case
                		next(state)=calc_cons:(init_xor[1][1][3])xor(digit_bool[digits[1][1]][3]);
                		TRUE:xor_arr[1][1][3];
                		esac;
                
                		next(xor_arr[1][1][4]):=case
                		next(state)=calc_cons:(init_xor[1][1][4])xor(digit_bool[digits[1][1]][4]);
                		TRUE:xor_arr[1][1][4];
                		esac;
                
                		next(xor_arr[1][1][5]):=case
                		next(state)=calc_cons:(init_xor[1][1][5])xor(digit_bool[digits[1][1]][5]);
                		TRUE:xor_arr[1][1][5];
                		esac;
                
                		next(xor_arr[1][1][6]):=case
                		next(state)=calc_cons:(init_xor[1][1][6])xor(digit_bool[digits[1][1]][6]);
                		TRUE:xor_arr[1][1][6];
                		esac;
                
                		next(xor_arr[2][0][0]):=case
                		next(state)=calc_cons:(init_xor[2][0][0])xor(digit_bool[digits[2][0]][0]);
                		TRUE:xor_arr[2][0][0];
                		esac;
                
                		next(xor_arr[2][0][1]):=case
                		next(state)=calc_cons:(init_xor[2][0][1])xor(digit_bool[digits[2][0]][1]);
                		TRUE:xor_arr[2][0][1];
                		esac;
                
                		next(xor_arr[2][0][2]):=case
                		next(state)=calc_cons:(init_xor[2][0][2])xor(digit_bool[digits[2][0]][2]);
                		TRUE:xor_arr[2][0][2];
                		esac;
                
                		next(xor_arr[2][0][3]):=case
                		next(state)=calc_cons:(init_xor[2][0][3])xor(digit_bool[digits[2][0]][3]);
                		TRUE:xor_arr[2][0][3];
                		esac;
                
                		next(xor_arr[2][0][4]):=case
                		next(state)=calc_cons:(init_xor[2][0][4])xor(digit_bool[digits[2][0]][4]);
                		TRUE:xor_arr[2][0][4];
                		esac;
                
                		next(xor_arr[2][0][5]):=case
                		next(state)=calc_cons:(init_xor[2][0][5])xor(digit_bool[digits[2][0]][5]);
                		TRUE:xor_arr[2][0][5];
                		esac;
                
                		next(xor_arr[2][0][6]):=case
                		next(state)=calc_cons:(init_xor[2][0][6])xor(digit_bool[digits[2][0]][6]);
                		TRUE:xor_arr[2][0][6];
                		esac;
                
                		next(xor_arr[2][1][0]):=case
                		next(state)=calc_cons:(init_xor[2][1][0])xor(digit_bool[digits[2][1]][0]);
                		TRUE:xor_arr[2][1][0];
                		esac;
                
                		next(xor_arr[2][1][1]):=case
                		next(state)=calc_cons:(init_xor[2][1][1])xor(digit_bool[digits[2][1]][1]);
                		TRUE:xor_arr[2][1][1];
                		esac;
                
                		next(xor_arr[2][1][2]):=case
                		next(state)=calc_cons:(init_xor[2][1][2])xor(digit_bool[digits[2][1]][2]);
                		TRUE:xor_arr[2][1][2];
                		esac;
                
                		next(xor_arr[2][1][3]):=case
                		next(state)=calc_cons:(init_xor[2][1][3])xor(digit_bool[digits[2][1]][3]);
                		TRUE:xor_arr[2][1][3];
                		esac;
                
                		next(xor_arr[2][1][4]):=case
                		next(state)=calc_cons:(init_xor[2][1][4])xor(digit_bool[digits[2][1]][4]);
                		TRUE:xor_arr[2][1][4];
                		esac;
                
                		next(xor_arr[2][1][5]):=case
                		next(state)=calc_cons:(init_xor[2][1][5])xor(digit_bool[digits[2][1]][5]);
                		TRUE:xor_arr[2][1][5];
                		esac;
                
                		next(xor_arr[2][1][6]):=case
                		next(state)=calc_cons:(init_xor[2][1][6])xor(digit_bool[digits[2][1]][6]);
                		TRUE:xor_arr[2][1][6];
				esac;	
				
				/--guessing the new digits' values--/
                
				next(digits[0][0]):=case
				next(state)=calc_cons | next(state) = correct: digits[0][0];
				TRUE: {0,1,2,3,4,5,6,7,8,9};
				esac;
            
				next(digits[0][1]):=case
				next(state)=calc_cons | next(state) = correct: digits[0][1];
				TRUE: {0,1,2,3,4,5,6,7,8,9};
				esac;
            
				next(digits[1][0]):=case
				next(state)=calc_cons | next(state) = correct: digits[1][0];
				TRUE: {0,1,2,3,4,5,6,7,8,9};
				esac;
            
				next(digits[1][1]):=case
				next(state)=calc_cons | next(state) = correct: digits[1][1];
				TRUE: {0,1,2,3,4,5,6,7,8,9};
				esac;
            
				next(digits[2][0]):=case
				next(state)=calc_cons | next(state) = correct: digits[2][0];
				TRUE: {0,1,2,3,4,5,6,7,8,9};
				esac;
            
				next(digits[2][1]):=case
				next(state)=calc_cons | next(state) = correct: digits[2][1];
				TRUE: {0,1,2,3,4,5,6,7,8,9};
				esac;
            
				
		
				LTLSPEC
				G !(state = correct)
		
