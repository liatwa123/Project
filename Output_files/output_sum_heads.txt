*** This is NuSMV 2.6.0 (compiled on Wed Oct 14 15:37:51 2015)
*** Enabled addons are: compass
*** For more information on NuSMV see <http://nusmv.fbk.eu>
*** or email to <nusmv-users@list.fbk.eu>.
*** Please report bugs to <Please report bugs to <nusmv-users@fbk.eu>>

*** Copyright (c) 2010-2014, Fondazione Bruno Kessler

*** This version of NuSMV is linked to the CUDD library version 2.4.1
*** Copyright (c) 1995-2004, Regents of the University of Colorado

*** This version of NuSMV is linked to the MiniSat SAT solver. 
*** See http://minisat.se/MiniSat.html
*** Copyright (c) 2003-2006, Niklas Een, Niklas Sorensson
*** Copyright (c) 2007-2010, Niklas Sorensson

Warning: at line 886 expression might result in array subscripting out of bounds.

Warning: at line 879 expression might result in array subscripting out of bounds.

Warning: at line 872 expression might result in array subscripting out of bounds.

Warning: at line 865 expression might result in array subscripting out of bounds.

Warning: at line 858 expression might result in array subscripting out of bounds.

Warning: at line 851 expression might result in array subscripting out of bounds.

Warning: at line 844 expression might result in array subscripting out of bounds.

Warning: at line 837 expression might result in array subscripting out of bounds.

Warning: at line 830 expression might result in array subscripting out of bounds.

Warning: at line 823 expression might result in array subscripting out of bounds.

-- no counterexample found with bound 0
-- no counterexample found with bound 1
-- no counterexample found with bound 2
-- no counterexample found with bound 3
-- no counterexample found with bound 4
-- no counterexample found with bound 5
-- no counterexample found with bound 6
-- no counterexample found with bound 7
-- no counterexample found with bound 8
-- no counterexample found with bound 9
-- no counterexample found with bound 10
-- no counterexample found with bound 11
-- no counterexample found with bound 12
-- no counterexample found with bound 13
-- no counterexample found with bound 14
-- no counterexample found with bound 15
-- no counterexample found with bound 16
-- no counterexample found with bound 17
-- no counterexample found with bound 18
-- no counterexample found with bound 19
-- no counterexample found with bound 20
-- no counterexample found with bound 21
-- no counterexample found with bound 22
-- no counterexample found with bound 23
-- no counterexample found with bound 24
-- no counterexample found with bound 25
-- no counterexample found with bound 26
-- no counterexample found with bound 27
-- no counterexample found with bound 28
-- no counterexample found with bound 29
-- specification  G !(state = correct)    is false
-- as demonstrated by the following execution sequence
Trace Description: BMC Counterexample 
Trace Type: Counterexample 
  -> State: 1.1 <-
    count_row1 = 0
    count_row2 = 0
    count_row3 = 0
    count_row4 = 0
    count_col1 = 0
    count_col2 = 0
    count_col3 = 0
    count_col4 = 0
    count_di1 = 0
    count_di2 = 0
    num_allowed = 6
    row1 = 0
    row2 = 3
    row3 = 10
    row4 = 17
    rows_equal = FALSE
    cols_equal = FALSE
    dis_equal = FALSE
    finished_count = FALSE
    col1 = 0
    col2 = 0
    col3 = 1
    col4 = 2
    di1 = 0
    di2 = 2
    arr_rows[0] = 1
    arr_rows[1] = 1
    arr_rows[2] = 1
    arr_rows[3] = 2
    arr_rows[4] = 1
    arr_rows[5] = 1
    arr_rows[6] = 2
    arr_rows[7] = 2
    arr_rows[8] = 2
    arr_rows[9] = 2
    arr_rows[10] = 3
    arr_rows[11] = 2
    arr_rows[12] = 2
    arr_rows[13] = 2
    arr_rows[14] = 3
    arr_rows[15] = 3
    arr_rows[16] = 3
    arr_rows[17] = 4
    arr_rows[18] = 4
    arr_rows[19] = 3
    arr_rows[20] = 4
    arr_rows[21] = 4
    arr_rows[22] = 4
    arr_rows[23] = 4
    arr_cols[0] = 1
    arr_cols[1] = 3
    arr_cols[2] = 3
    arr_cols[3] = 1
    arr_cols[4] = 2
    arr_cols[5] = 3
    arr_cols[6] = 4
    arr_cols[7] = 2
    arr_cols[8] = 2
    arr_cols[9] = 3
    arr_cols[10] = 1
    arr_cols[11] = 2
    arr_cols[12] = 3
    arr_cols[13] = 4
    arr_cols[14] = 2
    arr_cols[15] = 3
    arr_cols[16] = 4
    arr_cols[17] = 1
    arr_cols[18] = 2
    arr_cols[19] = 3
    arr_cols[20] = 4
    arr_cols[21] = 1
    arr_cols[22] = 3
    arr_cols[23] = 4
    arr_dis[0] = 1
    arr_dis[1] = 0
    arr_dis[2] = 0
    arr_dis[3] = 0
    arr_dis[4] = 0
    arr_dis[5] = 0
    arr_dis[6] = 0
    arr_dis[7] = 1
    arr_dis[8] = 1
    arr_dis[9] = 2
    arr_dis[10] = 0
    arr_dis[11] = 1
    arr_dis[12] = 2
    arr_dis[13] = 0
    arr_dis[14] = 2
    arr_dis[15] = 1
    arr_dis[16] = 0
    arr_dis[17] = 2
    arr_dis[18] = 0
    arr_dis[19] = 1
    arr_dis[20] = 1
    arr_dis[21] = 2
    arr_dis[22] = 0
    arr_dis[23] = 1
    state = initial
    match_dis[0] = 1
    match_dis[1] = 0
    match_dis[2] = 0
    match_dis[3] = 0
    match_dis[4] = 0
    match_dis[5] = 0
    match_dis[6] = 0
    match_dis[7] = 1
    match_dis[8] = 1
    match_dis[9] = 2
    match_dis[10] = 0
    match_dis[11] = 1
    match_dis[12] = 2
    match_dis[13] = 0
    match_dis[14] = 2
    match_dis[15] = 1
    match_dis[16] = 0
    match_dis[17] = 2
    match_dis[18] = 0
    match_dis[19] = 1
    match_dis[20] = 1
    match_dis[21] = 2
    match_dis[22] = 0
    match_dis[23] = 1
    match_cols[0] = 1
    match_cols[1] = 3
    match_cols[2] = 3
    match_cols[3] = 1
    match_cols[4] = 2
    match_cols[5] = 3
    match_cols[6] = 4
    match_cols[7] = 2
    match_cols[8] = 2
    match_cols[9] = 3
    match_cols[10] = 1
    match_cols[11] = 2
    match_cols[12] = 3
    match_cols[13] = 4
    match_cols[14] = 2
    match_cols[15] = 3
    match_cols[16] = 4
    match_cols[17] = 1
    match_cols[18] = 2
    match_cols[19] = 3
    match_cols[20] = 4
    match_cols[21] = 1
    match_cols[22] = 3
    match_cols[23] = 4
    match_rows[0] = 1
    match_rows[1] = 1
    match_rows[2] = 1
    match_rows[3] = 2
    match_rows[4] = 1
    match_rows[5] = 1
    match_rows[6] = 2
    match_rows[7] = 2
    match_rows[8] = 2
    match_rows[9] = 2
    match_rows[10] = 3
    match_rows[11] = 2
    match_rows[12] = 2
    match_rows[13] = 2
    match_rows[14] = 3
    match_rows[15] = 3
    match_rows[16] = 3
    match_rows[17] = 4
    match_rows[18] = 4
    match_rows[19] = 3
    match_rows[20] = 4
    match_rows[21] = 4
    match_rows[22] = 4
    match_rows[23] = 4
    di_options[0] = 0
    di_options[1] = 0, 1
    di_options[2] = 0, 2
    di_options[3] = 1, 2
    row_options[0] = 1
    row_options[1] = 1, 2
    row_options[2] = 2
    row_options[3] = 2, 3
    row_options[4] = 3
    row_options[5] = 3, 4
    row_options[6] = 4
  -> State: 1.2 <-
    state = calc_cons
  -> State: 1.3 <-
    count_row1 = 1
    count_row2 = 1
    count_row3 = 1
    count_row4 = 1
    count_col1 = 1
    count_col3 = 1
    count_di1 = 1
    row1 = 1
    row2 = 4
    row3 = 11
    row4 = 18
    col1 = 3
    col2 = 1
    col3 = 2
    col4 = 6
    di1 = 3
    di2 = 5
  -> State: 1.4 <-
    count_row1 = 2
    count_row4 = 2
    count_col1 = 2
    count_col3 = 2
    count_col4 = 1
    row1 = 2
    row2 = 5
    row3 = 12
    row4 = 19
    col1 = 7
    col2 = 4
    col3 = 5
    col4 = 9
    di1 = 4
    di2 = 6
  -> State: 1.5 <-
    count_row1 = 3
    count_col2 = 1
    count_col3 = 3
    row1 = 3
    row2 = 6
    row3 = 13
    row4 = 20
    col1 = 10
    col2 = 7
    col3 = 8
    col4 = 13
    di1 = 7
    di2 = 8
  -> State: 1.6 <-
    count_row2 = 2
    count_row4 = 3
    count_col1 = 3
    count_col2 = 2
    count_col4 = 2
    count_di1 = 2
    row1 = 4
    row2 = 7
    row3 = 14
    row4 = 21
    col1 = 14
    col2 = 8
    col3 = 9
    col4 = 16
    di1 = 8
    di2 = 9
  -> State: 1.7 <-
    count_row1 = 4
    count_row2 = 3
    count_row3 = 2
    count_row4 = 4
    count_col2 = 3
    count_col3 = 4
    count_col4 = 3
    count_di1 = 3
    count_di2 = 1
    row1 = 5
    row2 = 8
    row3 = 15
    row4 = 22
    col1 = 17
    col2 = 11
    col3 = 12
    col4 = 20
    di1 = 11
    di2 = 11
  -> State: 1.8 <-
    count_row1 = 5
    count_row2 = 4
    count_row3 = 3
    count_row4 = 5
    count_col1 = 4
    count_col2 = 4
    count_col3 = 5
    count_col4 = 4
    count_di1 = 4
    row1 = 6
    row2 = 9
    row3 = 16
    row4 = 23
    col1 = 21
    col2 = 14
    col3 = 15
    col4 = 23
    di1 = 12
    di2 = 12
  -> State: 1.9 <-
    count_row2 = 5
    count_row3 = 4
    count_row4 = 6
    count_col1 = 5
    count_col2 = 5
    count_col3 = 6
    count_col4 = 5
    count_di2 = 2
    row1 = 7
    row2 = 10
    row3 = 17
    row4 = 24
    col1 = 22
    col2 = 15
    col3 = 16
    col4 = 24
    di1 = 15
    di2 = 14
  -> State: 1.10 <-
    count_di1 = 5
    count_di2 = 3
    row2 = 11
    row3 = 18
    col2 = 18
    col3 = 19
    di1 = 16
    di2 = 15
  -> State: 1.11 <-
    count_row2 = 6
    count_col2 = 6
    count_col3 = 7
    row2 = 12
    row3 = 19
    col2 = 21
    col3 = 22
    di1 = 19
    di2 = 17
  -> State: 1.12 <-
    count_row2 = 7
    count_row3 = 5
    count_col3 = 8
    count_di1 = 6
    count_di2 = 4
    row2 = 13
    row3 = 20
    col2 = 22
    col3 = 23
    di1 = 20
    di2 = 18
  -> State: 1.13 <-
    count_row2 = 8
    count_di1 = 7
    row2 = 14
    row3 = 21
    col2 = 23
    col3 = 24
    di1 = 23
    di2 = 21
  -> State: 1.14 <-
    count_di1 = 8
    count_di2 = 5
    di1 = 24
    di2 = 22
  -> State: 1.15 <-
    row1 = 0
    row2 = 3
    row3 = 10
    row4 = 17
    finished_count = TRUE
    col1 = 0
    col2 = 0
    col3 = 1
    col4 = 2
    di1 = 0
    di2 = 2
    arr_rows[6] = 1
    arr_rows[13] = 3
    arr_rows[17] = 3
    arr_rows[19] = 4
    arr_cols[1] = 2
    arr_cols[2] = 4
    arr_cols[7] = 1
    arr_cols[8] = 3
    arr_cols[9] = 4
    arr_cols[16] = 3
    arr_cols[22] = 2
    arr_dis[2] = 2
    arr_dis[6] = 2
    arr_dis[7] = 0
    arr_dis[8] = 2
    arr_dis[9] = 0
    arr_dis[16] = 1
    arr_dis[17] = 0
    arr_dis[19] = 0
    state = guess
  -> State: 1.16 <-
    count_row1 = 0
    count_row2 = 0
    count_row3 = 0
    count_row4 = 0
    count_col1 = 0
    count_col2 = 0
    count_col3 = 0
    count_col4 = 0
    count_di1 = 0
    count_di2 = 0
    finished_count = FALSE
  -> State: 1.17 <-
    state = calc_cons
  -> State: 1.18 <-
    count_row1 = 1
    count_row2 = 1
    count_row3 = 1
    count_col1 = 1
    count_col4 = 1
    count_di1 = 1
    count_di2 = 1
    row1 = 1
    row2 = 4
    row3 = 11
    row4 = 18
    col1 = 3
    col2 = 1
    col3 = 2
    col4 = 6
    di1 = 3
    di2 = 5
  -> State: 1.19 <-
    count_row1 = 2
    count_row4 = 1
    count_col1 = 2
    count_col2 = 1
    count_col4 = 2
    row1 = 2
    row2 = 5
    row3 = 12
    row4 = 19
    col1 = 7
    col2 = 4
    col3 = 5
    col4 = 9
    di1 = 4
    di2 = 6
  -> State: 1.20 <-
    count_row1 = 3
    count_row4 = 2
    count_col1 = 3
    count_col2 = 2
    count_col3 = 1
    count_col4 = 3
    count_di2 = 2
    row1 = 3
    row2 = 6
    row3 = 13
    row4 = 20
    col1 = 10
    col2 = 7
    col3 = 8
    col4 = 13
    di1 = 7
    di2 = 8
  -> State: 1.21 <-
    count_row3 = 2
    count_row4 = 3
    count_col1 = 4
    count_col3 = 2
    count_col4 = 4
    count_di2 = 3
    row1 = 4
    row2 = 7
    row3 = 14
    row4 = 21
    col1 = 14
    col2 = 8
    col3 = 9
    col4 = 16
    di1 = 8
    di2 = 9
  -> State: 1.22 <-
    count_row1 = 4
    count_row2 = 2
    count_row3 = 3
    count_row4 = 4
    row1 = 5
    row2 = 8
    row3 = 15
    row4 = 22
    col1 = 17
    col2 = 11
    col3 = 12
    col4 = 20
    di1 = 11
    di2 = 11
  -> State: 1.23 <-
    count_row1 = 5
    count_row2 = 3
    count_row3 = 4
    count_row4 = 5
    count_col1 = 5
    count_col2 = 3
    count_col3 = 3
    count_col4 = 5
    count_di1 = 2
    row1 = 6
    row2 = 9
    row3 = 16
    row4 = 23
    col1 = 21
    col2 = 14
    col3 = 15
    col4 = 23
    di1 = 12
    di2 = 12
  -> State: 1.24 <-
    count_row1 = 6
    count_row2 = 4
    count_row3 = 5
    count_row4 = 6
    count_col1 = 6
    count_col2 = 4
    count_col3 = 4
    count_col4 = 6
    count_di2 = 4
    row1 = 7
    row2 = 10
    row3 = 17
    row4 = 24
    col1 = 22
    col2 = 15
    col3 = 16
    col4 = 24
    di1 = 15
    di2 = 14
  -> State: 1.25 <-
    count_row3 = 6
    count_col3 = 5
    count_di1 = 3
    count_di2 = 5
    row2 = 11
    row3 = 18
    col2 = 18
    col3 = 19
    di1 = 16
    di2 = 15
  -> State: 1.26 <-
    count_row2 = 5
    count_col2 = 5
    count_col3 = 6
    count_di1 = 4
    row2 = 12
    row3 = 19
    col2 = 21
    col3 = 22
    di1 = 19
    di2 = 17
  -> State: 1.27 <-
    count_row2 = 6
    row2 = 13
    row3 = 20
    rows_equal = TRUE
    col2 = 22
    col3 = 23
    di1 = 20
    di2 = 18
  -> State: 1.28 <-
    count_col2 = 6
    count_di1 = 5
    row2 = 14
    row3 = 21
    cols_equal = TRUE
    col2 = 23
    col3 = 24
    di1 = 23
    di2 = 21
  -> State: 1.29 <-
    count_di1 = 6
    count_di2 = 6
    dis_equal = TRUE
    di1 = 24
    di2 = 22
  -> State: 1.30 <-
    finished_count = TRUE
  -> State: 1.31 <-
    state = correct

ptime 1.0 for Win32, Freeware - http://www.pc-tools.net/
Copyright(C) 2002, Jem Berkes <jberkes@pc-tools.net>

=== NuSMV.exe -bmc -bmc_length 31 mat_h1.smv ===

Execution time: 4.491 s
