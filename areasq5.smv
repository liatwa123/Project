MODULE main
        
                VAR
        
                state:{initial, guess, calc_cons, correct};
                arr_junct_1: array 0..7 of 0..17;
                arr_junct_2: array 0..7 of 0..17;
                num_it: 0..17;
                cuts1: array 8..13 of array 0..2 of {90,180,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23};
                cuts2: array 8..13 of array 0..2 of {90,180,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23};
                inside1: array 9..12 of array 0..2 of {90,180,270,19,20,21,22,23};
                inside2: array 9..12 of array 0..2 of {90,180,270,19,20,21,22,23};
                
                equal1: boolean;
                equal2: boolean;
                legal: boolean;
                ind1: 0..13;
                ind2: 0..13;
                ind3: 0..13;
                init_ind1: 0..13;
                init_ind2: 0..13;
                finished: boolean; 
DEFINE	
                /--user input--/
                shape:=[[1, 90, 2], [2, 270, 3], [3, 180, 4], [4, 90, 5], [5, 180, 6], [6, 90, 7], [7, 180, 8], [8, 270, 9], [9, 90, 10], [10, 90, 11], [11, 270, 12], [12, 180, 13], [13, 90, 14], [14, 180, 15], [15, 90, 16], [16, 180, 17], [17, 270, 18], [18, 90, 1]];
                /--input-end--/
                
                cut_in:=[[19,180,1],[19,180,1],[19,180,1],[19,180,1],[19,180,1],[19,180,1],[19,180,1],[19,180,1],[19,180,1],[19,180,1],[19,180,1],[19,180,1],[19,180,1],[19,180,1],[19,180,1]];
                junct_in:=[1, 1, 1, 1, 1, 1, 1, 1];
                ins_in:=[[19,180,20],[19,180,20],[19,180,20],[19,180,20],[19,180,20],[19,180,20],[19,180,20],[19,180,20],[19,180,20],[19,180,20],[19,180,20],[19,180,20],[19,180,20]];
                
ASSIGN
                    
                    init(inside1):=ins_in;
                    init(inside2):=ins_in;
                    init(arr_junct_1):=junct_in;
                    init(arr_junct_2):=junct_in;
                    init(cuts1):=cut_in;
                    init(cuts2):=cut_in;
                    init(state):=initial;
                    init(ind1):= 0; 
                    init(ind2):= 0; 
                    init(ind3):=0;
                    init(init_ind1):=0;
                    init(init_ind2):= 0; 
                    init(legal):=TRUE;
                    init(equal1):=TRUE;
                    init(equal2):=TRUE;
                     init(num_it):=1;
        
                    next(state):=case
                    state = initial: guess; 
                    state = guess: calc_cons;
                    state = calc_cons & finished & (equal1 | equal2) & legal: correct;
                    TRUE: calc_cons;
                    esac;
                    
                    /--matchstick index iterator--/
                    
                     next(num_it):=(num_it + 1) mod (18);
                        
                    /--guessing the first matchstick index (from the original shape) of the first part--/
                    
                    next(arr_junct_1[0]):=case
                    next(state) = guess: {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17};
                    TRUE: arr_junct_1[0];
                    esac;
                    
                    /--choosing a half of the original shape's matchsticks for the first part, starting from the guessed index--/
                    next(arr_junct_1[1]):=case
                    next(state) = guess: (next(arr_junct_1[0]) + 1)mod(18);
                    TRUE: arr_junct_1[1];
                    esac;
                    next(arr_junct_1[2]):=case
                    next(state) = guess: (next(arr_junct_1[1]) + 1)mod(18);
                    TRUE: arr_junct_1[2];
                    esac;
                    next(arr_junct_1[3]):=case
                    next(state) = guess: (next(arr_junct_1[2]) + 1)mod(18);
                    TRUE: arr_junct_1[3];
                    esac;
                    next(arr_junct_1[4]):=case
                    next(state) = guess: (next(arr_junct_1[3]) + 1)mod(18);
                    TRUE: arr_junct_1[4];
                    esac;
                    next(arr_junct_1[5]):=case
                    next(state) = guess: (next(arr_junct_1[4]) + 1)mod(18);
                    TRUE: arr_junct_1[5];
                    esac;
                    next(arr_junct_1[6]):=case
                    next(state) = guess: (next(arr_junct_1[5]) + 1)mod(18);
                    TRUE: arr_junct_1[6];
                    esac;
                    next(arr_junct_1[7]):=case
                    next(state) = guess: (next(arr_junct_1[6]) + 1)mod(18);
                    TRUE: arr_junct_1[7];
                    esac;
                    
                    /--choosing the rest of the matchsticks for the second part--/
                    next(arr_junct_2[0]):=case
                    next(state) = guess: (next(arr_junct_1[7]) + 2)mod(18);
                    TRUE: arr_junct_2[0];
                    esac;
                    next(arr_junct_2[1]):=case
                    next(state) = guess: (next(arr_junct_2[0]) + 1)mod(18);
                    TRUE: arr_junct_2[1];
                    esac;
                    next(arr_junct_2[2]):=case
                    next(state) = guess: (next(arr_junct_2[1]) + 1)mod(18);
                    TRUE: arr_junct_2[2];
                    esac;
                    next(arr_junct_2[3]):=case
                    next(state) = guess: (next(arr_junct_2[2]) + 1)mod(18);
                    TRUE: arr_junct_2[3];
                    esac;
                    next(arr_junct_2[4]):=case
                    next(state) = guess: (next(arr_junct_2[3]) + 1)mod(18);
                    TRUE: arr_junct_2[4];
                    esac;
                    next(arr_junct_2[5]):=case
                    next(state) = guess: (next(arr_junct_2[4]) + 1)mod(18);
                    TRUE: arr_junct_2[5];
                    esac;
                    next(arr_junct_2[6]):=case
                    next(state) = guess: (next(arr_junct_2[5]) + 1)mod(18);
                    TRUE: arr_junct_2[6];
                    esac;
                    next(arr_junct_2[7]):=case
                    next(state) = guess: (next(arr_junct_2[6]) + 1)mod(18);
                    TRUE: arr_junct_2[7];
                    esac;
                    
                    /--matchstick index iterator for the first part (after division), iterating counterclockwise--/
                    next(ind1):=case
                    state = initial: 0;
                    state = guess & next(state) = calc_cons: next(init_ind1);
                    state = calc_cons & !finished & ind1 < 7: (ind1 + 1)mod(14);
            	    state = calc_cons & !finished & ind1 = 7 & cuts1[13][2] = (shape[(arr_junct_1[7])mod(18)][2])mod(19): 13;
            	    state = calc_cons & !finished & cuts1[13][2] = (shape[(arr_junct_1[7])mod(18)][2])mod(19) & ind1 > 8 : (ind1 + 13)mod(14);
            	    state = calc_cons & !finished & cuts1[13][2] = (shape[(arr_junct_1[7])mod(18)][2])mod(19) & ind1 = 8 : 0;
            	    state = calc_cons & !finished & ind1 = 7 & cuts1[8][2] = (shape[(arr_junct_1[7])mod(18)][2])mod(19): 8;
            	    state = calc_cons & !finished & ind1 > 7 & cuts1[8][2] = (shape[(arr_junct_1[7])mod(18)][2])mod(19): (ind1 + 1)mod(14);
                    state = calc_cons & next(state) = guess: 0;
                    TRUE: ind1;
                    esac;
                   
                   /--matchstick index iterator for the first part (after division), iterating clockwise--/
                    next(ind3):=case
                    state = guess & next(state) = calc_cons: next(init_ind1);
                    state = calc_cons & !finished & ind3 <= 7 & ind3 > 0: (ind3 + 13)mod(14);
            	    state = calc_cons & !finished & ind3 = 0 & cuts1[13][2] = (shape[(arr_junct_1[0])mod(18)][0])mod(19): 13;
            	    state = calc_cons & !finished & cuts1[13][2] = (shape[(arr_junct_1[0])mod(18)][0])mod(19) & ind3 > 8 & ind3 < 13 : (ind3 + 1)mod(14);
            	    state = calc_cons & !finished & cuts1[13][2] = (shape[(arr_junct_1[0])mod(18)][0])mod(19) & ind3 = 13 : 7;
            	    state = calc_cons & !finished & ind3 = 0 & cuts1[8][2] = (shape[(arr_junct_1[0])mod(18)][0])mod(19): 8;
            	    state = calc_cons & !finished & ind3 >= 8 & ind3 < 13 & cuts1[8][2] = (shape[(arr_junct_1[0])mod(18)][0])mod(19): (ind3 + 1)mod(14);
            	    state = calc_cons & !finished & ind3 = 13 & cuts1[8][2] = (shape[(arr_junct_1[0])mod(18)][0])mod(19): 7;
                    state = calc_cons & next(state) = guess: 0;
                    TRUE: ind3;
                    esac;
                   
                    /--matchstick index iterator for the second part (after division), iterating counterclockwise--/
                    next(ind2):=case
                    state = initial: 0;
                    state = guess & next(state) = calc_cons: next(init_ind2);
                    state = calc_cons & !finished & ind2 < 7: (ind2 + 1)mod(14);
            	    state = calc_cons & !finished & ind2 = 7 & cuts2[13][2] = (shape[(arr_junct_2[7])mod(18)][2])mod(19): 13;
            	    state = calc_cons & !finished & cuts2[13][2] = (shape[(arr_junct_2[7])mod(18)][2])mod(19) & ind2 > 8 : (ind2 + 13)mod(14);
            	    state = calc_cons & !finished & cuts2[13][2] = (shape[(arr_junct_2[7])mod(18)][2])mod(19) & ind2 = 8 : 0;
            	    state = calc_cons & !finished & ind2 = 7 & cuts2[8][2] = (shape[(arr_junct_2[7])mod(18)][2])mod(19): 8;
            	    state = calc_cons & !finished & ind2 > 7 & cuts2[8][2] = (shape[(arr_junct_2[7])mod(18)][2])mod(19): (ind2 + 1)mod(14);
                    state = calc_cons & next(state) = guess: 0;
                    TRUE: ind2;
                    esac;
                    
                    /--guessing the initial matchstick index for iterating - first part after division--/
                    next(init_ind1):=case
                    state = initial: 0;
                    state = guess & next(state) = calc_cons: {0,1,2,3,4,5,6,7,8,9,10,11,12,13};
                    state = calc_cons & next(state) = guess: 0;
                    TRUE: init_ind1;
                    esac;
                    
                     /--guessing the initial matchstick index for iterating - second part after division--/
                    next(init_ind2):=case
                    state = initial: 0;
                    state = guess & next(state) = calc_cons: {0,1,2,3,4,5,6,7,8,9,10,11,12,13};
                    state = calc_cons & next(state) = guess: 0;
                    TRUE: init_ind2;
                    esac;
                    
                    /--checks that all the matchsticks have been visited--/
                    next(finished):= num_it = 16;
                        
                    /--checks that the parts are equal, iterating on both counterclockwise--/
                    next(equal1):=case
                    state = calc_cons & next(state) = calc_cons & ind1 <= 7 & ind2 <= 7: equal1 & shape[arr_junct_1[ind1]][1] = shape[arr_junct_2[ind2]][1];
                    state = calc_cons & next(state) = calc_cons & ind1 <= 7 & ind2 = 8: equal1 & shape[arr_junct_1[ind1]][1] = cuts2[8][1];
                    state = calc_cons & next(state) = calc_cons & ind1 <= 7 & ind2 > 8 & ind2 < 13 : equal1 & shape[arr_junct_1[ind1]][1] = inside2[ind2][1];
                    state = calc_cons & next(state) = calc_cons & ind1 <= 7 & ind2 = 13: equal1 & shape[arr_junct_1[ind1]][1] = cuts2[13][1];
        
                    state = calc_cons & next(state) = calc_cons & ind1 = 8 & ind2 <= 7: equal1 & shape[arr_junct_2[ind2]][1] = cuts1[8][1];
                    state = calc_cons & next(state) = calc_cons & ind1 = 8 & ind2 = 8: equal1 & cuts1[8][1] = cuts2[8][1];
                    state = calc_cons & next(state) = calc_cons & ind1 = 8 & ind2 > 8 & ind2 < 13: equal1 & cuts1[8][1] = inside2[ind2][1];
                    state = calc_cons & next(state) = calc_cons & ind1 = 8 & ind2 = 13: equal1 & cuts1[8][1] = cuts2[13][1];
                    state = calc_cons & next(state) = calc_cons & ind1 > 8 & ind1 < 13 & ind2 <= 7: equal1 & shape[arr_junct_2[ind2]][1] = inside1[ind1][1];
                    state = calc_cons & next(state) = calc_cons & ind1 > 8 & ind1 < 13 & ind2 = 8: equal1 & cuts2[8][1] = inside1[ind1][1];
                    state = calc_cons & next(state) = calc_cons & ind1 > 8 & ind1 < 13 & ind2 > 8 & ind2 < 13: equal1 & inside1[ind1][1] = inside2[ind2][1];
                    state = calc_cons & next(state) = calc_cons & ind1 > 8 & ind1 < 13 & ind2 = 13: equal1 & inside1[ind1][1] = cuts2[13][1];
                    
                    state = calc_cons & next(state) = calc_cons & ind1 = 13 & ind2 <= 7: equal1 & shape[arr_junct_2[ind2]][1] = cuts1[13][1];
                    state = calc_cons & next(state) = calc_cons & ind1 = 13 & ind2 = 8: equal1 & cuts1[13][1] = cuts2[8][1];
                    state = calc_cons & next(state) = calc_cons & ind1 = 13 & ind2 > 8 & ind2 < 13: equal1 & cuts1[13][1] = inside2[ind2][1];
                    state = calc_cons & next(state) = calc_cons & ind1 = 13 & ind2 = 13: equal1 & cuts1[13][1] = cuts2[13][1];
                    next(state) = guess: TRUE;
                    TRUE: equal1;
                    esac;
                        
                    /--checks that the parts are equal, the first part's indices are iterated clockwise, the second part's indices are iterated counterclockwise--/
                    
                    next(equal2):=case
                    state = calc_cons & next(state) = calc_cons & ind3 <= 7 & ind2 <= 7: equal2 & shape[arr_junct_1[ind3]][1] = shape[arr_junct_2[ind2]][1];
                    state = calc_cons & next(state) = calc_cons & ind3 <= 7 & ind2 = 8: equal2 & shape[arr_junct_1[ind3]][1] = cuts2[8][1];
                    state = calc_cons & next(state) = calc_cons & ind3 <= 7 & ind2 > 8 & ind2 < 13: equal2 & shape[arr_junct_1[ind3]][1] = inside2[ind2][1];
                    state = calc_cons & next(state) = calc_cons & ind3 <= 7 & ind2 = 13: equal2 & shape[arr_junct_1[ind3]][1] = cuts2[13][1];
        
                    state = calc_cons & next(state) = calc_cons & ind3 = 8 & ind2 <= 7: equal2 & shape[arr_junct_2[ind2]][1] = cuts1[8][1];
                    state = calc_cons & next(state) = calc_cons & ind3 = 8 & ind2 = 8: equal2 & cuts1[8][1] = cuts2[8][1];
                    state = calc_cons & next(state) = calc_cons & ind3 = 8 & ind2 > 8 & ind2 < 13: equal2 & cuts1[8][1] = inside2[ind2][1];
                    state = calc_cons & next(state) = calc_cons & ind3 = 8 & ind2 = 13: equal2 & cuts1[8][1] = cuts2[13][1];
                    state = calc_cons & next(state) = calc_cons & ind3 > 8 & ind3 < 13 & ind2 <= 7: equal2 & shape[arr_junct_2[ind2]][1] = inside1[ind3][1];
                    state = calc_cons & next(state) = calc_cons & ind3 > 8 & ind3 < 13 & ind2 = 8: equal2 & cuts2[8][1] = inside1[ind3][1];
                    state = calc_cons & next(state) = calc_cons & ind3 > 8 & ind3 < 13 & ind2 > 8 & ind2 < 13: equal2 & inside1[ind3][1] = inside2[ind2][1];
                    state = calc_cons & next(state) = calc_cons & ind3 > 8 & ind3 < 13 & ind2 = 13: equal2 & inside1[ind3][1] = cuts2[13][1];
                    state = calc_cons & next(state) = calc_cons & ind3 = 13 & ind2 <= 7: equal2 & shape[arr_junct_2[ind2]][1] = cuts1[13][1];
                    state = calc_cons & next(state) = calc_cons & ind3 = 13 & ind2 = 8: equal2 & cuts1[13][1] = cuts2[8][1];
                    state = calc_cons & next(state) = calc_cons & ind3 = 13 & ind2 > 8 & ind2 < 13: equal2 & cuts1[13][1] = inside2[ind2][1];
                    
                    state = calc_cons & next(state) = calc_cons & ind3 = 13 & ind2 = 13: equal2 & cuts1[13][1] = cuts2[13][1];
                    next(state) = guess: TRUE;
                    TRUE: equal2;
                    esac;
                   
                   /--the new matchsticks' indices - the 'cuts' of the original shape--/
                    next(cuts1[8][0]):=19;
                    next(cuts1[13][0]):=23;
        
                    next(cuts2[8][0]):=19;
                    next(cuts2[13][0]):=23;
        
                     /--the original matchsticks' indices from the original shape - the 'cuts' of the original shape--/
                     
                    next(cuts1[8][2]):=next(shape[arr_junct_1[0]][0]);
                    next(cuts1[13][2]):=next(shape[arr_junct_1[7]][2]);
        
                    next(cuts2[8][2]):=next(shape[arr_junct_2[7]][2]);
                    next(cuts2[13][2]):=next(shape[arr_junct_2[0]][0]);
                    
                    /--guessing the cuts' angles according to the original shape's angles at these locations--/
                    /--for example: if the original angle is 180, the cuts' angles must equal 90--/
                    /--the sum of the angles from the two parts must equal the original shape's angle at this location--/
                   /--dividing a 90-degree shape is not valid--/
                   
                    next(cuts1[8][1]) := case
        
                    next(state) = guess & ((next(cuts1[8][2]))mod(19) > (next(cuts2[8][2]))mod(19) & !(next(cuts1[8][2]) = 1 & next(cuts2[8][2]) = 18) | next(cuts1[8][2]) = 1 & next(cuts2[8][2]) = 18) & next(shape[(abs(cuts2[8][2] + 17))mod(18)][1]) = 270: {90, 180};
        
                    next(state) = guess & ((next(cuts1[8][2]))mod(19) > (next(cuts2[8][2]))mod(19) & !(next(cuts1[8][2]) = 1 & next(cuts2[8][2]) = 18) | next(cuts1[8][2]) = 1 & next(cuts2[8][2]) = 18) & next(shape[(abs(cuts2[8][2] + 17))mod(18)][1]) = 180: 90;
        
        
                    next(state) = guess & ((next(cuts1[8][2]))mod(19) <= (next(cuts2[8][2]))mod(19)  & !(next(cuts1[8][2]) = 18 & next(cuts2[8][2]) = 1) | next(cuts1[8][2]) = 18 & next(cuts2[8][2]) = 1) & next(shape[(abs(cuts1[8][2] + 17))mod(18)][1]) = 180: 90;
        
                    next(state) = guess & ((next(cuts1[8][2]))mod(19) <= (next(cuts2[8][2]))mod(19)  & !(next(cuts1[8][2]) = 18 & next(cuts2[8][2]) = 1) | next(cuts1[8][2]) = 18 & next(cuts2[8][2]) = 1) & next(shape[(abs(cuts1[8][2] + 17))mod(18)][1]) = 270: {90, 180};
        
                    next(state) = calc_cons | next(state) = correct: cuts1[8][1];
                    TRUE: 0;
                    esac;
        
                    next(cuts2[8][1]) := case
        
                    next(state) = guess & ((next(cuts1[8][2]))mod(19) > (next(cuts2[8][2]))mod(19) & !(next(cuts1[8][2]) = 1 & next(cuts2[8][2]) = 18)| next(cuts1[8][2]) = 1 & next(cuts2[8][2]) = 18): next(shape[(abs(cuts2[8][2] + 17))mod(18)][1]) - next(cuts1[8][1]);
        
                    next(state) = guess & ((next(cuts1[8][2]))mod(19) <= (next(cuts2[8][2]))mod(19) & !(next(cuts1[8][2]) = 18 & next(cuts1[8][2]) = 1) | next(cuts1[8][2]) = 18 & next(cuts2[8][2]) = 1): next(shape[(abs(cuts1[8][2] + 17))mod(18)][1]) - next(cuts1[8][1]);
        
                    next(state) = calc_cons | next(state) = correct: cuts2[8][1];
                    TRUE: 0;
                    esac;
        
                    next(cuts1[13][1]) := case
        
                    next(state) = guess & ((next(cuts1[13][2]))mod(19) > (next(cuts2[13][2]))mod(19) & !(next(cuts1[13][2]) = 1 & next(cuts2[13][2]) = 18)| next(cuts1[13][2]) = 1 & next(cuts2[13][2]) = 18)& next(shape[(abs(cuts2[13][2] + 17))mod(18)][1]) = 270: {90, 180};
        
                    next(state) = guess & ((next(cuts1[13][2]))mod(19) > (next(cuts2[13][2]))mod(19) & !(next(cuts1[13][2]) = 1 & next(cuts2[13][2]) = 18)| next(cuts1[13][2]) = 1 & next(cuts2[13][2]) = 18)& next(shape[(abs(cuts2[13][2] + 17))mod(18)][1]) = 180: 90;
        
        
                    next(state) = guess & ((next(cuts1[13][2]))mod(19) <= (next(cuts2[13][2]))mod(19) & !(next(cuts1[13][2]) = 18 & next(cuts2[13][2]) = 1)| next(cuts1[13][2]) = 18 & next(cuts2[13][2]) = 1)& next(shape[(abs(cuts1[13][2] + 17))mod(18)][1]) = 180: 90;
        
                    next(state) = guess & ((next(cuts1[13][2]))mod(19) <= (next(cuts2[13][2]))mod(19) & !(next(cuts1[13][2]) = 18 & next(cuts2[13][2]) = 1)| next(cuts1[13][2]) = 18 & next(cuts2[13][2]) = 1)& next(shape[(abs(cuts1[13][2] + 17))mod(18)][1]) = 270: {90, 180};
        
                    next(state) = calc_cons | next(state) = correct: cuts1[13][1];
                    TRUE: 0;
                    esac;
        
                    next(cuts2[13][1]) := case
                    next(state) = guess & ((next(cuts1[13][2]))mod(19) > (next(cuts2[13][2]))mod(19) & !(next(cuts1[13][2]) = 1 & next(cuts2[13][2]) = 18)| next(cuts1[13][2]) = 1 & next(cuts2[13][2]) = 18): next(shape[(abs(cuts2[13][2] + 17))mod(18)][1]) - next(cuts1[13][1]);
        
                    next(state) = guess & ((next(cuts1[13][2]))mod(19) <= (next(cuts2[13][2]))mod(19) & !(next(cuts1[13][2]) = 18 & next(cuts2[13][2]) = 1)| next(cuts1[13][2]) = 18 & next(cuts2[13][2]) = 1): next(shape[(abs(cuts1[13][2] + 17))mod(18)][1]) - next(cuts1[13][1]);
        
                    next(state) = calc_cons | next(state) = correct: cuts2[13][1];
                    TRUE: 0;
                    esac;
                    
                    /--guessing the inner angles in the first part: the angles between the new matchsticks added--/
                    /--for each m1, angle1, m2 in part1: angle2 (between matchsticks m1 and m2) in the 2nd part = 360 - angle1--/
                    
                    next(inside1[9][0]):=19;
                    next(inside1[9][1]):=case
                    next(state) = guess: {90,270,180};
                    TRUE: inside1[9][1];
                    esac;
        
                    next(inside1[9][2]):=20;
        
                    next(inside2[9][0]):=19;
        
                    next(inside2[9][1]):=360 - next(inside1[9][1]);
        
                    next(inside2[9][2]):=20; 
                    next(inside1[10][0]):=20;
                    next(inside1[10][1]):=case
                    next(state) = guess: {90,270,180};
                    TRUE: inside1[10][1];
                    esac;
        
                    next(inside1[10][2]):=21;
        
                    next(inside2[10][0]):=20;
        
                    next(inside2[10][1]):=360 - next(inside1[10][1]);
        
                    next(inside2[10][2]):=21; 
                    next(inside1[11][0]):=21;
                    next(inside1[11][1]):=case
                    next(state) = guess: {90,270,180};
                    TRUE: inside1[11][1];
                    esac;
        
                    next(inside1[11][2]):=22;
        
                    next(inside2[11][0]):=21;
        
                    next(inside2[11][1]):=360 - next(inside1[11][1]);
        
                    next(inside2[11][2]):=22; 
                    next(inside1[12][0]):=22;
                    next(inside1[12][1]):=case
                    next(state) = guess: {90,270,180};
                    TRUE: inside1[12][1];
                    esac;
        
                    next(inside1[12][2]):=23;
        
                    next(inside2[12][0]):=22;
        
                    next(inside2[12][1]):=360 - next(inside1[12][1]);
        
                    next(inside2[12][2]):=23; 
                    
                    /--checking that the divided angles (from the original shape) do not equal 90--/
                    next(legal):=cuts1[8][1] != 0 & cuts2[8][1] != 0 & cuts1[13][1] != 0 & cuts2[13][1] != 0;
        
                    /--find a correct solution, this assertion is updated in order to include only polygons as solutions--/
                    LTLSPEC
                    G !(state = correct & !(arr_junct_1[0] = 11 & arr_junct_2[0] = 2 & arr_junct_1[1] = 12 & arr_junct_2[1] = 3 & arr_junct_1[2] = 13 & arr_junct_2[2] = 4 & arr_junct_1[3] = 14 & arr_junct_2[3] = 5 & arr_junct_1[4] = 15 & arr_junct_2[4] = 6 & arr_junct_1[5] = 16 & arr_junct_2[5] = 7 & arr_junct_1[6] = 17 & arr_junct_2[6] = 8 & arr_junct_1[7] = 0 & arr_junct_2[7] = 9 & inside1[9][0] = 22 & inside1[9][1] = 90 & inside1[9][2] = 23 & inside2[9][0] = 19 & inside2[9][1] = 90 & inside2[9][2] = 20 & inside1[10][0] = 21 & inside1[10][1] = 270 & inside1[10][2] = 22 & inside2[10][0] = 20 & inside2[10][1] = 270 & inside2[10][2] = 21 & inside1[11][0] = 20 & inside1[11][1] = 90 & inside1[11][2] = 21 & inside2[11][0] = 21 & inside2[11][1] = 90 & inside2[11][2] = 22 & inside1[12][0] = 19 & inside1[12][1] = 270 & inside1[12][2] = 20 & inside2[12][0] = 22 & inside2[12][1] = 270 & inside2[12][2] = 23 & cuts1[8][0] = 19 & cuts1[8][1] = 90 & cuts1[8][2] = 12 & cuts1[13][0] = 23 & cuts1[13][1] = 180 & cuts1[13][2] = 2 & cuts2[8][0] = 19 & cuts2[8][1] = 180 & cuts2[8][2] = 11 & cuts2[13][0] = 23 & cuts2[13][1] = 90 & cuts2[13][2] = 3))
