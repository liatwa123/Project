MODULE main
        
        /--state variables--/
        VAR
        num_squares_beginning:0..14;
        num_squares_end:0..14;
        num_allowed:0..24;
        num_move:0..24;
        
        
        num_squares_1_beg:0..9;
        num_squares_1_end:0..9;
        last_in_1:0..9;
        
        
        num_squares_2_beg:0..4;
        num_squares_2_end:0..4;
        last_in_2:0..4;
        
        
        num_squares_3_beg:0..1;
        num_squares_3_end:0..1;
        last_in_3:{0,1};
        
        
        matchsticks:array 0..23 of boolean;
        match_index: 0..24;
        xor_arr:array 0..23 of boolean;
        state:{initial, calc_cons, correct, guess, check_free};
        free: boolean;
        fin_free: boolean;
        finished_count: boolean;
        sq_1_bool: array 0..8 of boolean;
        sq_2_bool: array 0..3 of boolean;
        sq_3_bool: boolean;
        num_match_beg: 0..24;
        num_match_end:0..24;
        init_sq1:array 0..8 of boolean;
        init_sq2:array 0..3 of boolean;
		init_sq3:boolean;
        bool1:array 0..23 of boolean;
            
DEFINE
            list_square_1:=[[0,3,4,7],[1,4,5,8],[5,2,6,9],[10,7,11,14],[11,8,12,15],[12,13,16,9],[17,14,18,21],[18,15,19,22],[19,20,16,23]];
            list_square_2:=[[0,3,10,14,15,12,5,1],[1,2,6,13,16,15,11,4],[7,8,12,19,22,21,17,10],[8,9,13,20,22,23,18,11]];
            list_square_3:=[0,1,2,6,13,20,23,22,21,17,10,3];
            falsarr:=[FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE];
        
ASSIGN
            /--user input--/
            init(num_squares_beginning):=num_squares_1_beg  + num_squares_2_beg + num_squares_3_beg;
			
            init(num_squares_1_beg):= count(init_sq1[0]) + count(init_sq1[1]) + count(init_sq1[2]) + count(init_sq1[3]) + count(init_sq1[4]) + count(init_sq1[5]) + count(init_sq1[6]) + count(init_sq1[7]) + count(init_sq1[8]);
			
			init(num_squares_2_beg):= count(init_sq2[0]) + count(init_sq2[1]) + count(init_sq2[2]) + count(init_sq2[3]);
			
            init(num_squares_3_beg):=count(sq_3_bool);
			
            init(matchsticks):=bool1;
			init(sq_1_bool[0]):=matchsticks[0] & matchsticks[3] & matchsticks[4] & matchsticks[7];
			init(sq_1_bool[1]):=matchsticks[1] & matchsticks[4] & matchsticks[5] & matchsticks[8];
			init(sq_1_bool[2]):=matchsticks[2] & matchsticks[5] & matchsticks[9] & matchsticks[6];
			init(sq_1_bool[3]):=matchsticks[7] & matchsticks[10] & matchsticks[11] & matchsticks[14];
			init(sq_1_bool[4]):=matchsticks[8] & matchsticks[11] & matchsticks[15] & matchsticks[12];
			init(sq_1_bool[5]):=matchsticks[16] & matchsticks[13] & matchsticks[12] & matchsticks[9];
			init(sq_1_bool[6]):=matchsticks[14] & matchsticks[17] & matchsticks[18] & matchsticks[21];
			init(sq_1_bool[7]):=matchsticks[15] & matchsticks[18] & matchsticks[19] & matchsticks[22];
			init(sq_1_bool[8]):=matchsticks[16] & matchsticks[19] & matchsticks[20] & matchsticks[23];
			
			init(init_sq1):=sq_1_bool;
			init(init_sq2):=sq_2_bool;
			init(init_sq3):=sq_3_bool;
			
			init(sq_2_bool[0]):=matchsticks[0] & matchsticks[1] & matchsticks[5] & matchsticks[12] & matchsticks[15] & matchsticks[14] & matchsticks[10] & matchsticks[3];
			init(sq_2_bool[1]):= matchsticks[1] & matchsticks[2] & matchsticks[6] & matchsticks[13] & matchsticks[16] & matchsticks[15] & matchsticks[11] & matchsticks[4];
			init(sq_2_bool[2]):=matchsticks[7] & matchsticks[8] & matchsticks[12] & matchsticks[19] & matchsticks[22] & matchsticks[21] & matchsticks[17] & matchsticks[10];
			init(sq_2_bool[3]):=matchsticks[8] & matchsticks[9] & matchsticks[13] & matchsticks[20] & matchsticks[23] & matchsticks[22] & matchsticks[18] & matchsticks[11];
			init(sq_3_bool):=matchsticks[0] & matchsticks[1] & matchsticks[2] & matchsticks[6] & matchsticks[13] & matchsticks[20] & matchsticks[23] & matchsticks[22] & matchsticks[21] & matchsticks[17] & matchsticks[10] & matchsticks[3];
			
        
        
init(num_squares_1_end):=0;
        init(num_squares_2_end):=0;
        init(num_squares_3_end):=0;
        init(xor_arr):=falsarr;
        
		init(free):=(matchsticks[0] & !(sq_1_bool[0] | sq_2_bool[0] | sq_3_bool))|(matchsticks[1] & !(sq_1_bool[1] | sq_2_bool[0] | sq_2_bool[1] | sq_3_bool))|(matchsticks[2] & !(sq_1_bool[2] | sq_2_bool[1] | sq_3_bool))|(matchsticks[3] & !(sq_1_bool[0] | sq_2_bool[0] | sq_3_bool))|(matchsticks[4] & !(sq_1_bool[0] | sq_1_bool[1] | sq_2_bool[1]))|(matchsticks[5] & !(sq_1_bool[1] | sq_1_bool[2] | sq_2_bool[0]))|(matchsticks[6] & !(sq_1_bool[2] | sq_2_bool[1] | sq_3_bool))|(matchsticks[7] & !(sq_1_bool[0] | sq_1_bool[3] | sq_2_bool[2]) )|(matchsticks[8] & !(sq_1_bool[1] | sq_1_bool[4] | sq_2_bool[2] | sq_2_bool[3]))|(matchsticks[9] & !(sq_1_bool[2] | sq_1_bool[5] | sq_2_bool[3]) )|(matchsticks[10] & !(sq_1_bool[3] | sq_2_bool[2] | sq_2_bool[0] | sq_3_bool))|(matchsticks[11] & !(sq_1_bool[3] | sq_1_bool[4] | sq_2_bool[3]))|(matchsticks[12] & !(sq_1_bool[5] | sq_1_bool[4] | sq_2_bool[2]))|(matchsticks[13] & !(sq_1_bool[5] | sq_2_bool[3] | sq_3_bool))|(matchsticks[14] & !(sq_1_bool[3] | sq_1_bool[6] | sq_2_bool[0]))|(matchsticks[15] &  !(sq_1_bool[4] | sq_1_bool[7] | sq_2_bool[0]) )|(matchsticks[16] &  !(sq_1_bool[5] | sq_1_bool[8] | sq_2_bool[1]))|(matchsticks[17] & !(sq_1_bool[6] | sq_2_bool[2] | sq_3_bool))|(matchsticks[18] & !(sq_1_bool[6] | sq_1_bool[7] | sq_2_bool[3]) )|(matchsticks[19] & !(sq_1_bool[7] | sq_1_bool[8] | sq_2_bool[2]))|(matchsticks[20] & !(sq_1_bool[8] | sq_2_bool[3] | sq_3_bool))|(matchsticks[21] &  !(sq_1_bool[6] | sq_2_bool[2] | sq_3_bool))|(matchsticks[22] & !(sq_1_bool[7] | sq_2_bool[2] | sq_2_bool[3] | sq_3_bool))|(matchsticks[23] & !(sq_1_bool[8] | sq_2_bool[3] | sq_3_bool));
		
        init(fin_free):=FALSE;
        init(last_in_1):=0;
        init(last_in_2):=0;
        init(last_in_3):=0;
        init(num_move):=0;
        
        
        init(match_index):=0;
        init(state):=initial;
        init(finished_count):=FALSE;
        init(num_match_beg):=count(bool1[0]) + count(bool1[1]) + count(bool1[2]) + count(bool1[3]) + count(bool1[4]) + count(bool1[5]) + count(bool1[6]) + count(bool1[7]) + count(bool1[8]) + count(bool1[9]) + count(bool1[10]) + count(bool1[11]) + count(bool1[12]) + count(bool1[13]) + count(bool1[14]) + count(bool1[15]) + count(bool1[16]) + count(bool1[17]) + count(bool1[18]) + count(bool1[19]) + count(bool1[20]) + count(bool1[21]) + count(bool1[22]) + count(bool1[23]);
        init(num_match_end):=0;
		
		
        /--next values--/
        /--constants--/
		next(bool1):=bool1;
        next(num_squares_beginning):=num_squares_beginning;
        next(num_squares_1_beg):=num_squares_1_beg;
        next(num_squares_2_beg):=num_squares_2_beg;
        next(num_squares_3_beg):=num_squares_3_beg;
		
		next(init_sq1):=init_sq1;
		next(init_sq2):=init_sq2;
		next(init_sq3):=init_sq3;
        next(num_squares_end):=num_squares_end;
        next(num_allowed):=num_allowed;
        next(finished_count):=last_in_1=9 & last_in_2=4 & last_in_3=1;
        next(num_match_beg):=num_match_beg;
		
        /--non constants--/
        next(state):=case
        finished_count & state = check_free & !free & fin_free & num_squares_1_end + num_squares_2_end + num_squares_3_end = num_squares_end & num_move = 2*num_allowed & num_match_beg = num_match_end: correct;
        state = calc_cons & finished_count & (num_squares_1_end + num_squares_2_end + num_squares_3_end != num_squares_end | num_move!=2*num_allowed | num_match_beg != num_match_end): guess;
        state = calc_cons & finished_count & (num_squares_1_end + num_squares_2_end + num_squares_3_end = num_squares_end & num_move=2*num_allowed & num_match_beg = num_match_end): check_free;
        state = check_free & !fin_free: check_free;
        state = check_free & fin_free & free: guess;
        state = guess & num_squares_1_end != 0: guess;
        state = correct: correct;
        TRUE: calc_cons;
        esac;
		
        
        
        next(match_index):=case
        state = check_free: (match_index + 1)mod(25);
        TRUE: 0;
        esac;
        
        
        next(fin_free):=(next(match_index) = 24);
        
        
        next(last_in_1):=case
        state = calc_cons & next(state) = calc_cons & last_in_1 < 9: (last_in_1 + 1)mod(10);
        state = calc_cons & last_in_1 = 9 & next(state) = calc_cons: 9;
        state = calc_cons & last_in_1 = 9 & next(state) = guess: 0;
        state = calc_cons & last_in_1 = 9 & next(state) = correct: 9;
        state = guess: 0;
        state = correct: 9;
        state = initial: 0;
        TRUE: 9;
        esac;
        
        
        next(last_in_2):=case
        state = calc_cons & next(state) = calc_cons & last_in_2 < 4: (last_in_2 + 1)mod(5);
        state = calc_cons & last_in_2 = 4 & next(state) = calc_cons: 4;
        state = calc_cons & last_in_2 = 4 & next(state) = guess: 0;
        state = calc_cons & last_in_2 = 4 & next(state) = correct: 4;
        state = guess: 0;
        state = correct: 4;
        state = initial: 0;
        TRUE: 4;
        esac;
        
        
        next(last_in_3):=case
        state = calc_cons & next(state) = calc_cons & last_in_3 < 1: (last_in_3 + 1)mod(2);
        state = calc_cons & last_in_3 = 1 & next(state) = calc_cons: 1;
        state = calc_cons & last_in_3 = 1 & next(state) = guess: 0;
        state = calc_cons & last_in_3 = 1 & next(state) = correct: 1;
        state = guess: 0;
        state = correct: 1;
        state = initial: 0;
        TRUE: 1;
        esac;
        
        
        next(matchsticks[0]):=case
        next(state) = calc_cons: matchsticks[0];
        next(state) = correct: matchsticks[0];
        next(state) = guess & state = calc_cons:{TRUE, FALSE};
        TRUE:matchsticks[0];
        esac;
        
        
        next(matchsticks[1]):=case
        next(state) = calc_cons: matchsticks[1];
        next(state) = correct: matchsticks[1];
        next(state) = guess & state = calc_cons:{TRUE, FALSE};
        TRUE:matchsticks[1];
        esac;
        
        
        next(matchsticks[2]):=case
        next(state) = calc_cons: matchsticks[2];
        next(state) = correct: matchsticks[2];
        next(state) = guess & state = calc_cons:{TRUE, FALSE};
        TRUE:matchsticks[2];
        esac;
        
        
        next(matchsticks[3]):=case
        next(state) = calc_cons: matchsticks[3];
        next(state) = correct: matchsticks[3];
        next(state) = guess & state = calc_cons:{TRUE, FALSE};
        TRUE:matchsticks[3];
        esac;
        
        
        next(matchsticks[4]):=case
        next(state) = calc_cons: matchsticks[4];
        next(state) = correct: matchsticks[4];
        next(state) = guess & state = calc_cons:{TRUE, FALSE};
        TRUE:matchsticks[4];
        esac;
        
        
        next(matchsticks[5]):=case
        next(state) = calc_cons: matchsticks[5];
        next(state) = correct: matchsticks[5];
        next(state) = guess & state = calc_cons:{TRUE, FALSE};
        TRUE:matchsticks[5];
        esac;
        
        
        next(matchsticks[6]):=case
        next(state) = calc_cons: matchsticks[6];
        next(state) = correct: matchsticks[6];
        next(state) = guess & state = calc_cons:{TRUE, FALSE};
        TRUE:matchsticks[6];
        esac;
        
        
        next(matchsticks[7]):=case
        next(state) = calc_cons: matchsticks[7];
        next(state) = correct: matchsticks[7];
        next(state) = guess & state = calc_cons:{TRUE, FALSE};
        TRUE:matchsticks[7];
        esac;
        
        
        next(matchsticks[8]):=case
        next(state) = calc_cons: matchsticks[8];
        next(state) = correct: matchsticks[8];
        next(state) = guess & state = calc_cons:{TRUE, FALSE};
        TRUE:matchsticks[8];
        esac;
        
        
        next(matchsticks[9]):=case
        next(state) = calc_cons: matchsticks[9];
        next(state) = correct: matchsticks[9];
        next(state) = guess & state = calc_cons:{TRUE, FALSE};
        TRUE:matchsticks[9];
        esac;
        
        
        next(matchsticks[10]):=case
        next(state) = calc_cons: matchsticks[10];
        next(state) = correct: matchsticks[10];
        next(state) = guess & state = calc_cons:{TRUE, FALSE};
        TRUE:matchsticks[10];
        esac;
        
        
        next(matchsticks[11]):=case
        next(state) = calc_cons: matchsticks[11];
        next(state) = correct: matchsticks[11];
        next(state) = guess & state = calc_cons:{TRUE, FALSE};
        TRUE:matchsticks[11];
        esac;
        
        
        next(matchsticks[12]):=case
        next(state) = calc_cons: matchsticks[12];
        next(state) = correct: matchsticks[12];
        next(state) = guess & state = calc_cons:{TRUE, FALSE};
        TRUE:matchsticks[12];
        esac;
        
        
        next(matchsticks[13]):=case
        next(state) = calc_cons: matchsticks[13];
        next(state) = correct: matchsticks[13];
        next(state) = guess & state = calc_cons:{TRUE, FALSE};
        TRUE:matchsticks[13];
        esac;
        
        
        next(matchsticks[14]):=case
        next(state) = calc_cons: matchsticks[14];
        next(state) = correct: matchsticks[14];
        next(state) = guess & state = calc_cons:{TRUE, FALSE};
        TRUE:matchsticks[14];
        esac;
        
        
        next(matchsticks[15]):=case
        next(state) = calc_cons: matchsticks[15];
        next(state) = correct: matchsticks[15];
        next(state) = guess & state = calc_cons:{TRUE, FALSE};
        TRUE:matchsticks[15];
        esac;
        
        
        next(matchsticks[16]):=case
        next(state) = calc_cons: matchsticks[16];
        next(state) = correct: matchsticks[16];
        next(state) = guess & state = calc_cons:{TRUE, FALSE};
        TRUE:matchsticks[16];
        esac;
        
        
        next(matchsticks[17]):=case
        next(state) = calc_cons: matchsticks[17];
        next(state) = correct: matchsticks[17];
        next(state) = guess & state = calc_cons:{TRUE, FALSE};
        TRUE:matchsticks[17];
        esac;
        
        
        next(matchsticks[18]):=case
        next(state) = calc_cons: matchsticks[18];
        next(state) = correct: matchsticks[18];
        next(state) = guess & state = calc_cons:{TRUE, FALSE};
        TRUE:matchsticks[18];
        esac;
        
        
        next(matchsticks[19]):=case
        next(state) = calc_cons: matchsticks[19];
        next(state) = correct: matchsticks[19];
        next(state) = guess & state = calc_cons:{TRUE, FALSE};
        TRUE:matchsticks[19];
        esac;
        
        
        next(matchsticks[20]):=case
        next(state) = calc_cons: matchsticks[20];
        next(state) = correct: matchsticks[20];
        next(state) = guess & state = calc_cons:{TRUE, FALSE};
        TRUE:matchsticks[20];
        esac;
        
        
        next(matchsticks[21]):=case
        next(state) = calc_cons: matchsticks[21];
        next(state) = correct: matchsticks[21];
        next(state) = guess & state = calc_cons:{TRUE, FALSE};
        TRUE:matchsticks[21];
        esac;
        
        
        next(matchsticks[22]):=case
        next(state) = calc_cons: matchsticks[22];
        next(state) = correct: matchsticks[22];
        next(state) = guess & state = calc_cons:{TRUE, FALSE};
        TRUE:matchsticks[22];
        esac;
        
        
        next(matchsticks[23]):=case
        next(state) = calc_cons: matchsticks[23];
        next(state) = correct: matchsticks[23];
        next(state) = guess & state = calc_cons:{TRUE, FALSE};
        TRUE:matchsticks[23];
        esac;
        
        
        next(xor_arr[0]):=case
        next(state)=calc_cons:(bool1[0])xor(matchsticks[0]);
        TRUE:xor_arr[0];
        esac;
        
        
        next(xor_arr[1]):=case
        next(state)=calc_cons:(bool1[1])xor(matchsticks[1]);
        TRUE:xor_arr[1];
        esac;
        
        
        next(xor_arr[2]):=case
        next(state)=calc_cons:(bool1[2])xor(matchsticks[2]);
        TRUE:xor_arr[2];
        esac;
        
        
        next(xor_arr[3]):=case
        next(state)=calc_cons:(bool1[3])xor(matchsticks[3]);
        TRUE:xor_arr[3];
        esac;
        
        
        next(xor_arr[4]):=case
        next(state)=calc_cons:(bool1[4])xor(matchsticks[4]);
        TRUE:xor_arr[4];
        esac;
        
        
        next(xor_arr[5]):=case
        next(state)=calc_cons:(bool1[5])xor(matchsticks[5]);
        TRUE:xor_arr[5];
        esac;
        
        
        next(xor_arr[6]):=case
        next(state)=calc_cons:(bool1[6])xor(matchsticks[6]);
        TRUE:xor_arr[6];
        esac;
        
        
        next(xor_arr[7]):=case
        next(state)=calc_cons:(bool1[7])xor(matchsticks[7]);
        TRUE:xor_arr[7];
        esac;
        
        
        next(xor_arr[8]):=case
        next(state)=calc_cons:(bool1[8])xor(matchsticks[8]);
        TRUE:xor_arr[8];
        esac;
        
        
        next(xor_arr[9]):=case
        next(state)=calc_cons:(bool1[9])xor(matchsticks[9]);
        TRUE:xor_arr[9];
        esac;
        
        
        next(xor_arr[10]):=case
        next(state)=calc_cons:(bool1[10])xor(matchsticks[10]);
        TRUE:xor_arr[10];
        esac;
        
        
        next(xor_arr[11]):=case
        next(state)=calc_cons:(bool1[11])xor(matchsticks[11]);
        TRUE:xor_arr[11];
        esac;
        
        
        next(xor_arr[12]):=case
        next(state)=calc_cons:(bool1[12])xor(matchsticks[12]);
        TRUE:xor_arr[12];
        esac;
        
        
        next(xor_arr[13]):=case
        next(state)=calc_cons:(bool1[13])xor(matchsticks[13]);
        TRUE:xor_arr[13];
        esac;
        
        
        next(xor_arr[14]):=case
        next(state)=calc_cons:(bool1[14])xor(matchsticks[14]);
        TRUE:xor_arr[14];
        esac;
        
        
        next(xor_arr[15]):=case
        next(state)=calc_cons:(bool1[15])xor(matchsticks[15]);
        TRUE:xor_arr[15];
        esac;
        
        
        next(xor_arr[16]):=case
        next(state)=calc_cons:(bool1[16])xor(matchsticks[16]);
        TRUE:xor_arr[16];
        esac;
        
        
        next(xor_arr[17]):=case
        next(state)=calc_cons:(bool1[17])xor(matchsticks[17]);
        TRUE:xor_arr[17];
        esac;
        
        next(xor_arr[18]):=case
        next(state)=calc_cons:(bool1[18])xor(matchsticks[18]);
        TRUE:xor_arr[18];
        esac;
        
        next(xor_arr[19]):=case
        next(state)=calc_cons:(bool1[19])xor(matchsticks[19]);
        TRUE:xor_arr[19];
        esac;
        
        
        next(xor_arr[20]):=case
        next(state)=calc_cons:(bool1[20])xor(matchsticks[20]);
        TRUE:xor_arr[20];
        esac;
        
        
        next(xor_arr[21]):=case
        next(state)=calc_cons:(bool1[21])xor(matchsticks[21]);
        TRUE:xor_arr[21];
        esac;
        
        
        next(xor_arr[22]):=case
        next(state)=calc_cons:(bool1[22])xor(matchsticks[22]);
        TRUE:xor_arr[22];
        esac;
        
        
        next(xor_arr[23]):=case
        next(state)=calc_cons:(bool1[23])xor(matchsticks[23]);
        TRUE:xor_arr[23];
        esac;
        
        
        next(sq_1_bool[0]):=case
        matchsticks[0] & matchsticks[4] & matchsticks[7] & matchsticks[3]: TRUE;
        TRUE: FALSE;
        esac;
        
        
        next(sq_1_bool[1]):=case
        matchsticks[1] & matchsticks[4] & matchsticks[5] & matchsticks[8]: TRUE;
        TRUE: FALSE;
        esac;
        
        
        next(sq_1_bool[2]):=case
        matchsticks[2] & matchsticks[5] & matchsticks[9] & matchsticks[6]: TRUE;
        TRUE: FALSE;
        esac;
        
        
        next(sq_1_bool[3]):=case
        matchsticks[7] & matchsticks[10] & matchsticks[11] & matchsticks[14]: TRUE;
        TRUE: FALSE;
        esac;
        
        
        next(sq_1_bool[4]):=case
        matchsticks[8] & matchsticks[11] & matchsticks[15] & matchsticks[12]: TRUE;
        TRUE: FALSE;
        esac;
        
        
        next(sq_1_bool[5]):=case
        matchsticks[16] & matchsticks[13] & matchsticks[12] & matchsticks[9]: TRUE;
        TRUE: FALSE;
        esac;
        
        
        next(sq_1_bool[6]):=case
        matchsticks[14] & matchsticks[17] & matchsticks[18] & matchsticks[21]: TRUE;
        TRUE: FALSE;
        esac;
        
        
        next(sq_1_bool[7]):=case
        matchsticks[15] & matchsticks[18] & matchsticks[19] & matchsticks[22]: TRUE;
        TRUE: FALSE;
        esac;
        
        
        next(sq_1_bool[8]):=case
        matchsticks[16] & matchsticks[19] & matchsticks[20] & matchsticks[23]: TRUE;
        TRUE: FALSE;
        esac;
        
        next(sq_2_bool[0]):=case
        matchsticks[0] & matchsticks[1] & matchsticks[5] & matchsticks[12] & matchsticks[15] & matchsticks[14] & matchsticks[10] & matchsticks[3]: TRUE;
        TRUE: FALSE;
        esac;
        
        
        next(sq_2_bool[1]):=case
        matchsticks[1] & matchsticks[2] & matchsticks[6] & matchsticks[13] & matchsticks[16] & matchsticks[15] & matchsticks[11] & matchsticks[4]: TRUE;
        TRUE: FALSE;
        esac;
        
        next(sq_2_bool[2]):=case
        matchsticks[7] & matchsticks[8] & matchsticks[12] & matchsticks[19] & matchsticks[22] & matchsticks[21] & matchsticks[17] & matchsticks[10]: TRUE;
        TRUE: FALSE;
        esac;
        
        
        next(sq_2_bool[3]):=case
        matchsticks[8] & matchsticks[9] & matchsticks[13] & matchsticks[20] & matchsticks[23] & matchsticks[22] & matchsticks[18] & matchsticks[11]: TRUE;
        TRUE: FALSE;
        esac;
        
        
        next(sq_3_bool):=case
        matchsticks[0] & matchsticks[1] & matchsticks[2] & matchsticks[6] & matchsticks[13] & matchsticks[20] & matchsticks[23] & matchsticks[22] & matchsticks[21] & matchsticks[17] & matchsticks[10] & matchsticks[3]: TRUE;
        TRUE: FALSE;
        esac;
        
        
        next(num_move):=case
        state = guess: count(next(xor_arr[0])) + count(next(xor_arr[1])) + count(next(xor_arr[2])) + count(next(xor_arr[3])) + count(next(xor_arr[4])) + count(next(xor_arr[5])) + count(next(xor_arr[6])) + count(next(xor_arr[7])) + count(next(xor_arr[8])) + count(next(xor_arr[9])) + count(next(xor_arr[10])) + count(next(xor_arr[11])) + count(next(xor_arr[12])) + count(next(xor_arr[13])) + count(next(xor_arr[14])) + count(next(xor_arr[15])) + count(next(xor_arr[16])) + count(next(xor_arr[17])) + count(next(xor_arr[18])) + count(next(xor_arr[19])) + count(next(xor_arr[20])) + count(next(xor_arr[21])) + count(next(xor_arr[22])) + count(next(xor_arr[23]));
        TRUE: num_move;
        esac;
        
        
        next(num_match_end):= count(matchsticks[0]) +  count(matchsticks[1]) + count(matchsticks[2]) + count(matchsticks[3]) + count(matchsticks[4]) + count(matchsticks[5]) + count(matchsticks[6]) + count(matchsticks[7]) + count(matchsticks[8]) + count(matchsticks[9]) + count(matchsticks[10]) + count(matchsticks[11]) + count(matchsticks[12]) + count(matchsticks[13]) + count(matchsticks[14]) + count(matchsticks[15]) + count(matchsticks[16]) + count(matchsticks[17]) + count(matchsticks[18]) + count(matchsticks[19]) + count(matchsticks[20]) + count(matchsticks[21]) + count(matchsticks[22]) + count(matchsticks[23]);
        
        next(free):=case
        state = check_free & match_index = 0 & matchsticks[0]: !(sq_1_bool[0] | sq_2_bool[0] | sq_3_bool);
        state = check_free & match_index = 0 & !matchsticks[0]: FALSE;
        state = check_free & match_index = 1 & matchsticks[1]: !(sq_1_bool[1] | sq_2_bool[0] | sq_2_bool[1] | sq_3_bool) | free;
        state = check_free & match_index = 1 & !matchsticks[1]: free;
        state = check_free & match_index = 2 & matchsticks[2]: !(sq_1_bool[2] | sq_2_bool[1] | sq_3_bool) | free;
        state = check_free & match_index = 2 & !matchsticks[2]: free;
        state = check_free & match_index = 3 & matchsticks[3]: !(sq_1_bool[0] | sq_2_bool[0] | sq_3_bool) | free;
        state = check_free & match_index = 3 & !matchsticks[3]: free;
        state = check_free & match_index = 4 & matchsticks[4]: !(sq_1_bool[0] | sq_1_bool[1] | sq_2_bool[1]) | free;
        state = check_free & match_index = 4 & !matchsticks[4]: free;
        state = check_free & match_index = 5 & matchsticks[5]: !(sq_1_bool[1] | sq_1_bool[2] | sq_2_bool[0]) | free;
        state = check_free & match_index = 5 & !matchsticks[5]: free;
        state = check_free & match_index = 6 & matchsticks[6]: !(sq_1_bool[2] | sq_2_bool[1] | sq_3_bool) | free;
        state = check_free & match_index = 6 & !matchsticks[6]: free;
        state = check_free & match_index = 7 & matchsticks[7]: !(sq_1_bool[0] | sq_1_bool[3] | sq_2_bool[2]) | free;
        state = check_free & match_index = 7 & !matchsticks[7]: free;
        state = check_free & match_index = 8 & matchsticks[8]: !(sq_1_bool[1] | sq_1_bool[4] | sq_2_bool[2] | sq_2_bool[3]) | free;
        state = check_free & match_index = 8 & !matchsticks[8]: free;
        state = check_free & match_index = 9 & matchsticks[9]: !(sq_1_bool[2] | sq_1_bool[5] | sq_2_bool[3]) | free;
        state = check_free & match_index = 9 & !matchsticks[9]: free;
        state = check_free & match_index = 10 & matchsticks[10]: !(sq_1_bool[3] | sq_2_bool[2] | sq_2_bool[0] | sq_3_bool) | free;
        state = check_free & match_index = 10 & !matchsticks[10]: free;
        state = check_free & match_index = 11 & matchsticks[11]: !(sq_1_bool[3] | sq_1_bool[4] | sq_2_bool[3]) | free;
        state = check_free & match_index = 11 & !matchsticks[11]: free;
        state = check_free & match_index = 12 & matchsticks[12]: !(sq_1_bool[5] | sq_1_bool[4] | sq_2_bool[2]) | free;
        state = check_free & match_index = 12 & !matchsticks[12]: free;
        state = check_free & match_index = 13 & matchsticks[13]: !(sq_1_bool[5] | sq_2_bool[3] | sq_3_bool) | free;
        state = check_free & match_index = 13 & !matchsticks[13]: free;
        state = check_free & match_index = 14 & matchsticks[14]: !(sq_1_bool[3] | sq_1_bool[6] | sq_2_bool[0]) | free;
        state = check_free & match_index = 14 & !matchsticks[14]: free;
        state = check_free & match_index = 15 & matchsticks[15]: !(sq_1_bool[4] | sq_1_bool[7] | sq_2_bool[0]) | free;
        state = check_free & match_index = 15 & !matchsticks[15]: free;
        state = check_free & match_index = 16 & matchsticks[16]: !(sq_1_bool[5] | sq_1_bool[8] | sq_2_bool[1]) | free;
        state = check_free & match_index = 16 & !matchsticks[16]: free;
        state = check_free & match_index = 17 & matchsticks[17]: !(sq_1_bool[6] | sq_2_bool[2] | sq_3_bool) | free;
        state = check_free & match_index = 17 & !matchsticks[17]: free;
        state = check_free & match_index = 18 & matchsticks[18]: !(sq_1_bool[6] | sq_1_bool[7] | sq_2_bool[3]) | free;
        state = check_free & match_index = 18 & !matchsticks[18]: free;
        state = check_free & match_index = 19 & matchsticks[19]: !(sq_1_bool[7] | sq_1_bool[8] | sq_2_bool[2]) | free;
        state = check_free & match_index = 19 & !matchsticks[19]: free;
        state = check_free & match_index = 20 & matchsticks[20]: !(sq_1_bool[8] | sq_2_bool[3] | sq_3_bool) | free;
        state = check_free & match_index = 20 & !matchsticks[20]: free;
        state = check_free & match_index = 21 & matchsticks[21]: !(sq_1_bool[6] | sq_2_bool[2] | sq_3_bool) | free;
        state = check_free & match_index = 21 & !matchsticks[21]: free;
        state = check_free & match_index = 22 & matchsticks[22]: !(sq_1_bool[7] | sq_2_bool[2] | sq_2_bool[3] | sq_3_bool) | free;
        state = check_free & match_index = 22 & !matchsticks[22]: free;
        state = check_free & match_index = 23 & !matchsticks[23]: free;
        state = check_free & match_index = 23 & matchsticks[23]: !(sq_1_bool[8] | sq_2_bool[3] | sq_3_bool) | free;
        state = check_free & match_index = 24: free;
        TRUE: FALSE;
        esac;
        
        
        next(num_squares_1_end):=case
        !(finished_count) & state = calc_cons & sq_1_bool[last_in_1] & last_in_1 < 9: (num_squares_1_end+1)mod(10) ;
        state = guess: 0;
        TRUE: num_squares_1_end;
        esac;
        
        
        next(num_squares_2_end):=case
        !(finished_count) & state = calc_cons & sq_2_bool[last_in_2] & last_in_2 < 4: (num_squares_2_end+1)mod(5) ;
        state = guess: 0;
        TRUE: num_squares_2_end;
        esac;
        
        
        next(num_squares_3_end):=case
        !(finished_count) & state = calc_cons & sq_3_bool & last_in_3 < 1: (num_squares_3_end+1)mod(2) ;
        state = guess: 0;
        TRUE: num_squares_3_end;
        esac;
        
        
        LTLSPEC
                         G !(state = initial & !free & num_allowed != 0 & num_squares_end != 0 & F state = correct & num_squares_end != num_squares_beginning)
