MODULE main
                
        				/--state variables--/
        				VAR
        				num_move:0..42;
                       
        				digits: array 0..2 of array 0..1 of 0..9;
        		
        				xor_arr: array 0..2 of array 0..1 of array 0..6 of boolean;
						init_xor: array 0..2 of array 0..1 of array 0..6 of boolean;
						init_digs: array 0..2 of array 0..1 of 0..9;
        		
        				state:{initial, calc_cons, correct, guess};
                
        				num_match_beg: 0..42;
        				num_match_end: 0..42;
        				num_allowed:0..30;
DEFINE
        				/--7-segment representation array--/
        				digit_bool:=[[TRUE,TRUE,TRUE,TRUE,TRUE,FALSE,TRUE],[FALSE,FALSE,FALSE,TRUE,TRUE,FALSE,FALSE],[TRUE,FALSE,TRUE,TRUE,FALSE,TRUE,TRUE],[FALSE,FALSE,TRUE,TRUE,TRUE,TRUE,TRUE],[FALSE,TRUE,FALSE,TRUE,TRUE,TRUE,FALSE],[FALSE,TRUE,TRUE,FALSE,TRUE,TRUE,TRUE],[TRUE,TRUE,TRUE,FALSE,TRUE,TRUE,TRUE],[FALSE,FALSE,TRUE,TRUE,TRUE,FALSE,FALSE],[TRUE,TRUE,TRUE,TRUE,TRUE,TRUE,TRUE],[FALSE,TRUE,TRUE,TRUE,TRUE,TRUE,TRUE]];
                
        				/--user input--/
        				
           
            /--end-input--/
            
ASSIGN
        		
        				/--init(digits):=init_digs;--/
						
        				
						
						init(init_digs[0][0]):=digits[0][0];
						init(init_digs[0][1]):=digits[0][1];
						init(init_digs[1][0]):=digits[1][0];
						init(init_digs[1][1]):=digits[1][1];
						init(init_digs[2][0]):=digits[2][0];
						init(init_digs[2][1]):=digits[2][1];
						
						init(init_xor[0][0][0]):=digit_bool[init_digs[0][0]][0];
						init(init_xor[0][0][1]):=digit_bool[init_digs[0][0]][1];
						init(init_xor[0][0][2]):=digit_bool[init_digs[0][0]][2];
						init(init_xor[0][0][3]):=digit_bool[init_digs[0][0]][3];
						init(init_xor[0][0][4]):=digit_bool[init_digs[0][0]][4];
						init(init_xor[0][0][5]):=digit_bool[init_digs[0][0]][5];
						init(init_xor[0][0][6]):=digit_bool[init_digs[0][0]][6];
						
						init(init_xor[0][1][0]):=digit_bool[init_digs[0][1]][0];
						init(init_xor[0][1][1]):=digit_bool[init_digs[0][1]][1];
						init(init_xor[0][1][2]):=digit_bool[init_digs[0][1]][2];
						init(init_xor[0][1][3]):=digit_bool[init_digs[0][1]][3];
						init(init_xor[0][1][4]):=digit_bool[init_digs[0][1]][4];
						init(init_xor[0][1][5]):=digit_bool[init_digs[0][1]][5];
						init(init_xor[0][1][6]):=digit_bool[init_digs[0][1]][6];
						
						init(init_xor[1][0][0]):=digit_bool[init_digs[1][0]][0];
						init(init_xor[1][0][1]):=digit_bool[init_digs[1][0]][1];
						init(init_xor[1][0][2]):=digit_bool[init_digs[1][0]][2];
						init(init_xor[1][0][3]):=digit_bool[init_digs[1][0]][3];
						init(init_xor[1][0][4]):=digit_bool[init_digs[1][0]][4];
						init(init_xor[1][0][5]):=digit_bool[init_digs[1][0]][5];
						init(init_xor[1][0][6]):=digit_bool[init_digs[1][0]][6];
						
						init(init_xor[1][1][0]):=digit_bool[init_digs[1][1]][0];
						init(init_xor[1][1][1]):=digit_bool[init_digs[1][1]][1];
						init(init_xor[1][1][2]):=digit_bool[init_digs[1][1]][2];
						init(init_xor[1][1][3]):=digit_bool[init_digs[1][1]][3];
						init(init_xor[1][1][4]):=digit_bool[init_digs[1][1]][4];
						init(init_xor[1][1][5]):=digit_bool[init_digs[1][1]][5];
						init(init_xor[1][1][6]):=digit_bool[init_digs[1][1]][6];
						
						init(init_xor[2][0][0]):=digit_bool[init_digs[2][0]][0];
						init(init_xor[2][0][1]):=digit_bool[init_digs[2][0]][1];
						init(init_xor[2][0][2]):=digit_bool[init_digs[2][0]][2];
						init(init_xor[2][0][3]):=digit_bool[init_digs[2][0]][3];
						init(init_xor[2][0][4]):=digit_bool[init_digs[2][0]][4];
						init(init_xor[2][0][5]):=digit_bool[init_digs[2][0]][5];
						init(init_xor[2][0][6]):=digit_bool[init_digs[2][0]][6];
						
						init(init_xor[2][1][0]):=digit_bool[init_digs[2][1]][0];
						init(init_xor[2][1][1]):=digit_bool[init_digs[2][1]][1];
						init(init_xor[2][1][2]):=digit_bool[init_digs[2][1]][2];
						init(init_xor[2][1][3]):=digit_bool[init_digs[2][1]][3];
						init(init_xor[2][1][4]):=digit_bool[init_digs[2][1]][4];
						init(init_xor[2][1][5]):=digit_bool[init_digs[2][1]][5];
						init(init_xor[2][1][6]):=digit_bool[init_digs[2][1]][6];
						
												init(xor_arr[0][0][0]):=digit_bool[init_digs[0][0]][0];
						init(xor_arr[0][0][1]):=digit_bool[init_digs[0][0]][1];
						init(xor_arr[0][0][2]):=digit_bool[init_digs[0][0]][2];
						init(xor_arr[0][0][3]):=digit_bool[init_digs[0][0]][3];
						init(xor_arr[0][0][4]):=digit_bool[init_digs[0][0]][4];
						init(xor_arr[0][0][5]):=digit_bool[init_digs[0][0]][5];
						init(xor_arr[0][0][6]):=digit_bool[init_digs[0][0]][6];
						
						init(xor_arr[0][1][0]):=digit_bool[init_digs[0][1]][0];
						init(xor_arr[0][1][1]):=digit_bool[init_digs[0][1]][1];
						init(xor_arr[0][1][2]):=digit_bool[init_digs[0][1]][2];
						init(xor_arr[0][1][3]):=digit_bool[init_digs[0][1]][3];
						init(xor_arr[0][1][4]):=digit_bool[init_digs[0][1]][4];
						init(xor_arr[0][1][5]):=digit_bool[init_digs[0][1]][5];
						init(xor_arr[0][1][6]):=digit_bool[init_digs[0][1]][6];
						
						init(xor_arr[1][0][0]):=digit_bool[init_digs[1][0]][0];
						init(xor_arr[1][0][1]):=digit_bool[init_digs[1][0]][1];
						init(xor_arr[1][0][2]):=digit_bool[init_digs[1][0]][2];
						init(xor_arr[1][0][3]):=digit_bool[init_digs[1][0]][3];
						init(xor_arr[1][0][4]):=digit_bool[init_digs[1][0]][4];
						init(xor_arr[1][0][5]):=digit_bool[init_digs[1][0]][5];
						init(xor_arr[1][0][6]):=digit_bool[init_digs[1][0]][6];
						
						init(xor_arr[1][1][0]):=digit_bool[init_digs[1][1]][0];
						init(xor_arr[1][1][1]):=digit_bool[init_digs[1][1]][1];
						init(xor_arr[1][1][2]):=digit_bool[init_digs[1][1]][2];
						init(xor_arr[1][1][3]):=digit_bool[init_digs[1][1]][3];
						init(xor_arr[1][1][4]):=digit_bool[init_digs[1][1]][4];
						init(xor_arr[1][1][5]):=digit_bool[init_digs[1][1]][5];
						init(xor_arr[1][1][6]):=digit_bool[init_digs[1][1]][6];
						
						init(xor_arr[2][0][0]):=digit_bool[init_digs[2][0]][0];
						init(xor_arr[2][0][1]):=digit_bool[init_digs[2][0]][1];
						init(xor_arr[2][0][2]):=digit_bool[init_digs[2][0]][2];
						init(xor_arr[2][0][3]):=digit_bool[init_digs[2][0]][3];
						init(xor_arr[2][0][4]):=digit_bool[init_digs[2][0]][4];
						init(xor_arr[2][0][5]):=digit_bool[init_digs[2][0]][5];
						init(xor_arr[2][0][6]):=digit_bool[init_digs[2][0]][6];
						
						init(xor_arr[2][1][0]):=digit_bool[init_digs[2][1]][0];
						init(xor_arr[2][1][1]):=digit_bool[init_digs[2][1]][1];
						init(xor_arr[2][1][2]):=digit_bool[init_digs[2][1]][2];
						init(xor_arr[2][1][3]):=digit_bool[init_digs[2][1]][3];
						init(xor_arr[2][1][4]):=digit_bool[init_digs[2][1]][4];
						init(xor_arr[2][1][5]):=digit_bool[init_digs[2][1]][5];
						init(xor_arr[2][1][6]):=digit_bool[init_digs[2][1]][6];
						
        				init(state):=initial;
        		
        				init(num_match_beg):=count(init_xor[0][0][0]) + count(init_xor[0][0][1]) + count(init_xor[0][0][2]) + count(init_xor[0][0][3]) + count(init_xor[0][0][4]) + count(init_xor[0][0][5]) + count(init_xor[0][0][6]) + count(init_xor[0][1][0]) + count(init_xor[0][1][1]) + count(init_xor[0][1][2]) + count(init_xor[0][1][3]) + count(init_xor[0][1][4]) + count(init_xor[0][1][5]) + count(init_xor[0][1][6]) + count(init_xor[1][0][0]) + count(init_xor[1][0][1]) + count(init_xor[1][0][2]) + count(init_xor[1][0][3]) + count(init_xor[1][0][4]) + count(init_xor[1][0][5]) + count(init_xor[1][0][6]) + count(init_xor[1][1][0]) + count(init_xor[1][1][1]) + count(init_xor[1][1][2]) + count(init_xor[1][1][3]) + count(init_xor[1][1][4]) + count(init_xor[1][1][5]) + count(init_xor[1][1][6]) + count(init_xor[2][0][0]) + count(init_xor[2][0][1]) + count(init_xor[2][0][2]) + count(init_xor[2][0][3]) + count(init_xor[2][0][4]) + count(init_xor[2][0][5]) + count(init_xor[2][0][6]) + count(init_xor[2][1][0]) + count(init_xor[2][1][1]) + count(init_xor[2][1][2]) + count(init_xor[2][1][3]) + count(init_xor[2][1][4]) + count(init_xor[2][1][5]) + count(init_xor[2][1][6]);
            
            init(num_match_end):=0;
        	init(num_move):=0;
			
			next(init_digs[0][0]):= init_digs[0][0];
			next(init_digs[0][1]):= init_digs[0][1];
			next(init_digs[1][0]):= init_digs[1][0];
			next(init_digs[1][1]):= init_digs[1][1];
			next(init_digs[2][0]):= init_digs[2][0];
			next(init_digs[2][1]):= init_digs[2][1];
			
			next(init_xor[0][0]):= init_xor[0][0];
			next(init_xor[0][1]):= init_xor[0][1];
			next(init_xor[1][0]):= init_xor[1][0];
			next(init_xor[1][1]):= init_xor[1][1];
			next(init_xor[2][0]):= init_xor[2][0];
			next(init_xor[2][1]):= init_xor[2][1];
			
        	next(num_allowed):=num_allowed;	
        	next(state):=case
        	state = initial: guess;
        	state = calc_cons & num_move = 2*num_allowed & num_match_beg = num_match_end & digits[0][0] * 10 + digits[0][1] * 1  - (digits[1][0] * 10 + digits[1][1] * 1 ) = digits[2][0] * 10 + digits[2][1] * 1 : correct;
                              state = calc_cons & !(num_move = 2*num_allowed & num_match_beg = num_match_end & digits[0][0] * 10 + digits[0][1] * 1  - (digits[1][0] * 10 + digits[1][1] * 1 ) = digits[2][0] * 10 + digits[2][1] * 1 ): guess;
        				      state = correct: correct;
        				      TRUE: calc_cons;
        				      esac;
        				      
        				      next(num_match_beg):=num_match_beg;
        				      next(num_match_end):=count(digit_bool[digits[0][0]][0]) + count(digit_bool[digits[0][0]][1]) + count(digit_bool[digits[0][0]][2]) + count(digit_bool[digits[0][0]][3]) + count(digit_bool[digits[0][0]][4]) + count(digit_bool[digits[0][0]][5]) + count(digit_bool[digits[0][0]][6]) + count(digit_bool[digits[0][1]][0]) + count(digit_bool[digits[0][1]][1]) + count(digit_bool[digits[0][1]][2]) + count(digit_bool[digits[0][1]][3]) + count(digit_bool[digits[0][1]][4]) + count(digit_bool[digits[0][1]][5]) + count(digit_bool[digits[0][1]][6]) + count(digit_bool[digits[1][0]][0]) + count(digit_bool[digits[1][0]][1]) + count(digit_bool[digits[1][0]][2]) + count(digit_bool[digits[1][0]][3]) + count(digit_bool[digits[1][0]][4]) + count(digit_bool[digits[1][0]][5]) + count(digit_bool[digits[1][0]][6]) + count(digit_bool[digits[1][1]][0]) + count(digit_bool[digits[1][1]][1]) + count(digit_bool[digits[1][1]][2]) + count(digit_bool[digits[1][1]][3]) + count(digit_bool[digits[1][1]][4]) + count(digit_bool[digits[1][1]][5]) + count(digit_bool[digits[1][1]][6]) + count(digit_bool[digits[2][0]][0]) + count(digit_bool[digits[2][0]][1]) + count(digit_bool[digits[2][0]][2]) + count(digit_bool[digits[2][0]][3]) + count(digit_bool[digits[2][0]][4]) + count(digit_bool[digits[2][0]][5]) + count(digit_bool[digits[2][0]][6]) + count(digit_bool[digits[2][1]][0]) + count(digit_bool[digits[2][1]][1]) + count(digit_bool[digits[2][1]][2]) + count(digit_bool[digits[2][1]][3]) + count(digit_bool[digits[2][1]][4]) + count(digit_bool[digits[2][1]][5]) + count(digit_bool[digits[2][1]][6]);
            
            next(num_move):=case
        	state = guess: count(next(xor_arr[0][0][0])) + count(next(xor_arr[0][0][1])) + count(next(xor_arr[0][0][2])) + count(next(xor_arr[0][0][3])) + count(next(xor_arr[0][0][4])) + count(next(xor_arr[0][0][5])) + count(next(xor_arr[0][0][6])) + count(next(xor_arr[0][1][0])) + count(next(xor_arr[0][1][1])) + count(next(xor_arr[0][1][2])) + count(next(xor_arr[0][1][3])) + count(next(xor_arr[0][1][4])) + count(next(xor_arr[0][1][5])) + count(next(xor_arr[0][1][6])) + count(next(xor_arr[1][0][0])) + count(next(xor_arr[1][0][1])) + count(next(xor_arr[1][0][2])) + count(next(xor_arr[1][0][3])) + count(next(xor_arr[1][0][4])) + count(next(xor_arr[1][0][5])) + count(next(xor_arr[1][0][6])) + count(next(xor_arr[1][1][0])) + count(next(xor_arr[1][1][1])) + count(next(xor_arr[1][1][2])) + count(next(xor_arr[1][1][3])) + count(next(xor_arr[1][1][4])) + count(next(xor_arr[1][1][5])) + count(next(xor_arr[1][1][6])) + count(next(xor_arr[2][0][0])) + count(next(xor_arr[2][0][1])) + count(next(xor_arr[2][0][2])) + count(next(xor_arr[2][0][3])) + count(next(xor_arr[2][0][4])) + count(next(xor_arr[2][0][5])) + count(next(xor_arr[2][0][6])) + count(next(xor_arr[2][1][0])) + count(next(xor_arr[2][1][1])) + count(next(xor_arr[2][1][2])) + count(next(xor_arr[2][1][3])) + count(next(xor_arr[2][1][4])) + count(next(xor_arr[2][1][5])) + count(next(xor_arr[2][1][6]));
            TRUE: num_move;
        	esac;
        	
        	next(xor_arr[0][0][0]):=case
                        next(state)=calc_cons:(init_xor[0][0][0])xor(digit_bool[digits[0][0]][0]);
                        TRUE:xor_arr[0][0][0];
                        esac;
                        
                        next(xor_arr[0][0][1]):=case
                        next(state)=calc_cons:(init_xor[0][0][1])xor(digit_bool[digits[0][0]][1]);
                        TRUE:xor_arr[0][0][1];
                        esac;
                        
                        next(xor_arr[0][0][2]):=case
                        next(state)=calc_cons:(init_xor[0][0][2])xor(digit_bool[digits[0][0]][2]);
                        TRUE:xor_arr[0][0][2];
                        esac;
                        
                        next(xor_arr[0][0][3]):=case
                        next(state)=calc_cons:(init_xor[0][0][3])xor(digit_bool[digits[0][0]][3]);
                        TRUE:xor_arr[0][0][3];
                        esac;
                        
                        next(xor_arr[0][0][4]):=case
                        next(state)=calc_cons:(init_xor[0][0][4])xor(digit_bool[digits[0][0]][4]);
                        TRUE:xor_arr[0][0][4];
                        esac;
                        
                        next(xor_arr[0][0][5]):=case
                        next(state)=calc_cons:(init_xor[0][0][5])xor(digit_bool[digits[0][0]][5]);
                        TRUE:xor_arr[0][0][5];
                        esac;
                        
                        next(xor_arr[0][0][6]):=case
                        next(state)=calc_cons:(init_xor[0][0][6])xor(digit_bool[digits[0][0]][6]);
                        TRUE:xor_arr[0][0][6];
                        esac;
                        
                        next(xor_arr[0][1][0]):=case
                        next(state)=calc_cons:(init_xor[0][1][0])xor(digit_bool[digits[0][1]][0]);
                        TRUE:xor_arr[0][1][0];
                        esac;
                        
                        next(xor_arr[0][1][1]):=case
                        next(state)=calc_cons:(init_xor[0][1][1])xor(digit_bool[digits[0][1]][1]);
                        TRUE:xor_arr[0][1][1];
                        esac;
                        
                        next(xor_arr[0][1][2]):=case
                        next(state)=calc_cons:(init_xor[0][1][2])xor(digit_bool[digits[0][1]][2]);
                        TRUE:xor_arr[0][1][2];
                        esac;
                        
                        next(xor_arr[0][1][3]):=case
                        next(state)=calc_cons:(init_xor[0][1][3])xor(digit_bool[digits[0][1]][3]);
                        TRUE:xor_arr[0][1][3];
                        esac;
                        
                        next(xor_arr[0][1][4]):=case
                        next(state)=calc_cons:(init_xor[0][1][4])xor(digit_bool[digits[0][1]][4]);
                        TRUE:xor_arr[0][1][4];
                        esac;
                        
                        next(xor_arr[0][1][5]):=case
                        next(state)=calc_cons:(init_xor[0][1][5])xor(digit_bool[digits[0][1]][5]);
                        TRUE:xor_arr[0][1][5];
                        esac;
                        
                        next(xor_arr[0][1][6]):=case
                        next(state)=calc_cons:(init_xor[0][1][6])xor(digit_bool[digits[0][1]][6]);
                        TRUE:xor_arr[0][1][6];
                        esac;
                        
                        next(xor_arr[1][0][0]):=case
                        next(state)=calc_cons:(init_xor[1][0][0])xor(digit_bool[digits[1][0]][0]);
                        TRUE:xor_arr[1][0][0];
                        esac;
                        
                        next(xor_arr[1][0][1]):=case
                        next(state)=calc_cons:(init_xor[1][0][1])xor(digit_bool[digits[1][0]][1]);
                        TRUE:xor_arr[1][0][1];
                        esac;
                        
                        next(xor_arr[1][0][2]):=case
                        next(state)=calc_cons:(init_xor[1][0][2])xor(digit_bool[digits[1][0]][2]);
                        TRUE:xor_arr[1][0][2];
                        esac;
                        
                        next(xor_arr[1][0][3]):=case
                        next(state)=calc_cons:(init_xor[1][0][3])xor(digit_bool[digits[1][0]][3]);
                        TRUE:xor_arr[1][0][3];
                        esac;
                        
                        next(xor_arr[1][0][4]):=case
                        next(state)=calc_cons:(init_xor[1][0][4])xor(digit_bool[digits[1][0]][4]);
                        TRUE:xor_arr[1][0][4];
                        esac;
                        
                        next(xor_arr[1][0][5]):=case
                        next(state)=calc_cons:(init_xor[1][0][5])xor(digit_bool[digits[1][0]][5]);
                        TRUE:xor_arr[1][0][5];
                        esac;
                        
                        next(xor_arr[1][0][6]):=case
                        next(state)=calc_cons:(init_xor[1][0][6])xor(digit_bool[digits[1][0]][6]);
                        TRUE:xor_arr[1][0][6];
                        esac;
                        
                        next(xor_arr[1][1][0]):=case
                        next(state)=calc_cons:(init_xor[1][1][0])xor(digit_bool[digits[1][1]][0]);
                        TRUE:xor_arr[1][1][0];
                        esac;
                        
                        next(xor_arr[1][1][1]):=case
                        next(state)=calc_cons:(init_xor[1][1][1])xor(digit_bool[digits[1][1]][1]);
                        TRUE:xor_arr[1][1][1];
                        esac;
                        
                        next(xor_arr[1][1][2]):=case
                        next(state)=calc_cons:(init_xor[1][1][2])xor(digit_bool[digits[1][1]][2]);
                        TRUE:xor_arr[1][1][2];
                        esac;
                        
                        next(xor_arr[1][1][3]):=case
                        next(state)=calc_cons:(init_xor[1][1][3])xor(digit_bool[digits[1][1]][3]);
                        TRUE:xor_arr[1][1][3];
                        esac;
                        
                        next(xor_arr[1][1][4]):=case
                        next(state)=calc_cons:(init_xor[1][1][4])xor(digit_bool[digits[1][1]][4]);
                        TRUE:xor_arr[1][1][4];
                        esac;
                        
                        next(xor_arr[1][1][5]):=case
                        next(state)=calc_cons:(init_xor[1][1][5])xor(digit_bool[digits[1][1]][5]);
                        TRUE:xor_arr[1][1][5];
                        esac;
                        
                        next(xor_arr[1][1][6]):=case
                        next(state)=calc_cons:(init_xor[1][1][6])xor(digit_bool[digits[1][1]][6]);
                        TRUE:xor_arr[1][1][6];
                        esac;
                        
                        next(xor_arr[2][0][0]):=case
                        next(state)=calc_cons:(init_xor[2][0][0])xor(digit_bool[digits[2][0]][0]);
                        TRUE:xor_arr[2][0][0];
                        esac;
                        
                        next(xor_arr[2][0][1]):=case
                        next(state)=calc_cons:(init_xor[2][0][1])xor(digit_bool[digits[2][0]][1]);
                        TRUE:xor_arr[2][0][1];
                        esac;
                        
                        next(xor_arr[2][0][2]):=case
                        next(state)=calc_cons:(init_xor[2][0][2])xor(digit_bool[digits[2][0]][2]);
                        TRUE:xor_arr[2][0][2];
                        esac;
                        
                        next(xor_arr[2][0][3]):=case
                        next(state)=calc_cons:(init_xor[2][0][3])xor(digit_bool[digits[2][0]][3]);
                        TRUE:xor_arr[2][0][3];
                        esac;
                        
                        next(xor_arr[2][0][4]):=case
                        next(state)=calc_cons:(init_xor[2][0][4])xor(digit_bool[digits[2][0]][4]);
                        TRUE:xor_arr[2][0][4];
                        esac;
                        
                        next(xor_arr[2][0][5]):=case
                        next(state)=calc_cons:(init_xor[2][0][5])xor(digit_bool[digits[2][0]][5]);
                        TRUE:xor_arr[2][0][5];
                        esac;
                        
                        next(xor_arr[2][0][6]):=case
                        next(state)=calc_cons:(init_xor[2][0][6])xor(digit_bool[digits[2][0]][6]);
                        TRUE:xor_arr[2][0][6];
                        esac;
                        
                        next(xor_arr[2][1][0]):=case
                        next(state)=calc_cons:(init_xor[2][1][0])xor(digit_bool[digits[2][1]][0]);
                        TRUE:xor_arr[2][1][0];
                        esac;
                        
                        next(xor_arr[2][1][1]):=case
                        next(state)=calc_cons:(init_xor[2][1][1])xor(digit_bool[digits[2][1]][1]);
                        TRUE:xor_arr[2][1][1];
                        esac;
                        
                        next(xor_arr[2][1][2]):=case
                        next(state)=calc_cons:(init_xor[2][1][2])xor(digit_bool[digits[2][1]][2]);
                        TRUE:xor_arr[2][1][2];
                        esac;
                        
                        next(xor_arr[2][1][3]):=case
                        next(state)=calc_cons:(init_xor[2][1][3])xor(digit_bool[digits[2][1]][3]);
                        TRUE:xor_arr[2][1][3];
                        esac;
                        
                        next(xor_arr[2][1][4]):=case
                        next(state)=calc_cons:(init_xor[2][1][4])xor(digit_bool[digits[2][1]][4]);
                        TRUE:xor_arr[2][1][4];
                        esac;
                        
                        next(xor_arr[2][1][5]):=case
                        next(state)=calc_cons:(init_xor[2][1][5])xor(digit_bool[digits[2][1]][5]);
                        TRUE:xor_arr[2][1][5];
                        esac;
                        
                        next(xor_arr[2][1][6]):=case
                        next(state)=calc_cons:(init_xor[2][1][6])xor(digit_bool[digits[2][1]][6]);
                        TRUE:xor_arr[2][1][6];
                        esac;
                        
                        
                    next(digits[0][0]):=case
                    next(state)=calc_cons | next(state) = correct: digits[0][0];
                    TRUE: {0,1,2,3,4,5,6,7,8,9};
                    esac;
                    
                    next(digits[0][1]):=case
                    next(state)=calc_cons | next(state) = correct: digits[0][1];
                    TRUE: {0,1,2,3,4,5,6,7,8,9};
                    esac;
                    
                    next(digits[1][0]):=case
                    next(state)=calc_cons | next(state) = correct: digits[1][0];
                    TRUE: {0,1,2,3,4,5,6,7,8,9};
                    esac;
                    
                    next(digits[1][1]):=case
                    next(state)=calc_cons | next(state) = correct: digits[1][1];
                    TRUE: {0,1,2,3,4,5,6,7,8,9};
                    esac;
                    
                    next(digits[2][0]):=case
                    next(state)=calc_cons | next(state) = correct: digits[2][0];
                    TRUE: {0,1,2,3,4,5,6,7,8,9};
                    esac;
                    
                    next(digits[2][1]):=case
                    next(state)=calc_cons | next(state) = correct: digits[2][1];
                    TRUE: {0,1,2,3,4,5,6,7,8,9};
                    esac;
                    LTLSPEC
                 G ! (state=correct)
