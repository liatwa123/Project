MODULE main
            /--number of digits per number = 3, number of matchsticks to remove = 6, minus remove --/
	    /--3 states: 1 state - initialization, 1 state - guess the digits, 1 state - 'correct'--/
	    /--run command: NuSMV -bmc -bmc_length 10 minus_remove2.smv--/
	    /--solved riddle--/
            /--state variables--/ 
            VAR
        dig1_1:0..9;
        dig1_1_in:0..9;
        num_op_dig1_1:0..5;
        dig1_2:0..9;
        dig1_2_in:0..9;
        num_op_dig1_2:0..5;
        dig1_3:0..9;
        dig1_3_in:0..9;
        num_op_dig1_3:0..5;
        dig2_1:0..9;
        dig2_1_in:0..9;
        num_op_dig2_1:0..5;
        dig2_2:0..9;
        dig2_2_in:0..9;
        num_op_dig2_2:0..5;
        dig2_3:0..9;
        dig2_3_in:0..9;
        num_op_dig2_3:0..5;
        result_1:0..9;
        result_1_in:0..9;
        num_op_dig3_1:0..5;
        result_2:0..9;
        result_2_in:0..9;
        num_op_dig3_2:0..5;
        result_3:0..9;
        result_3_in:0..9;
        num_op_dig3_3:0..5;
        num_allowed:0..45;
        plus_or_minus:{plus,minus};
            remove_or_add:{remove,add};
            
            /--legal checks if num_op_dig1, num_op_dig2 and num_op_dig3 are legal, meaning:--/ 
            /--these values are the solution of the riddle--/ 
            /--or: any transformation to different dig1, dig2 and dig3 is available using num_op_dig1, num_op_dig2 and num_op_dig3--/ 
            legal:boolean;
            is_sol:boolean;
            state:{zeros, guess, correct};
        
DEFINE
        /--digit_bool:=[[TRUE,TRUE,TRUE,TRUE,TRUE,FALSE,TRUE],[FALSE,FALSE,FALSE,TRUE,TRUE,FALSE,FALSE],[TRUE,FALSE,TRUE,TRUE,FALSE,TRUE,TRUE],[FALSE,FALSE,TRUE,TRUE,TRUE,TRUE,TRUE],[FALSE,TRUE,FALSE,TRUE,TRUE,TRUE,FALSE],[FALSE,TRUE,TRUE,FALSE,TRUE,TRUE,TRUE],[TRUE,TRUE,TRUE,FALSE,TRUE,TRUE,TRUE],[FALSE,FALSE,TRUE,TRUE,TRUE,FALSE,FALSE],[TRUE,TRUE,TRUE,TRUE,TRUE,TRUE,TRUE],[FALSE,TRUE,TRUE,TRUE,TRUE,TRUE,TRUE]];--/
        
        /--transformations available from every digit, based on num_op of the digit--/
        /--the rows are the original digit value, the lists are the transformations and the index of every list is the num_op of the digit--/
        
        /--add transformation--/
        arr_trans_add:=[[{0},{8},{0},{0},{0},{0}],
        [{1},{7},{4},{3},{9,0},{8}],
        [{2},{2},{8},{2},{2},{2}],
        [{3},{9},{8},{3},{3},{3}],
        [{4},{4},{9},{8},{4},{4}],
        [{5},{6,9},{8},{5},{5},{5}],
        [{6},{8},{6},{6},{6},{6}],
        [{7},{7},{3},{0,9},{8},{7}],
        [{8},{8},{8},{8},{8},{8}],
        [{9},{8},{9},{9},{9},{9}]];
        
        /--remove transformation--/
        arr_trans_remove:=[[{0},{0},{0},{7},{1},{0}],
        [{1},{1},{1},{1},{1},{1}],
        [{2},{2},{2},{2},{2},{2}],
        [{3},{3},{7},{1},{3},{3}],
        [{4},{4},{1},{4},{4},{4}],
        [{5},{5},{5},{5},{5},{5}],
        [{6},{5},{6},{6},{6},{6}],
        [{7},{1},{7},{7},{7},{7}],
        [{8},{9,0,6},{3,2,5},{4},{7},{1}],
        [{9},{3,5},{4},{7},{1},{9}]];
        
ASSIGN
        /--initial values: user input--/
	/--leftmost digits--/
        init(dig1_1) := 9;
        init(dig2_1) := 8;
        init(result_1) := 9;
	
	/--copy-initial input--/
        init(dig1_1_in) := 9;
        init(dig2_1_in) := 8;
        init(result_1_in) := 9;
	/--copy-end--/
	/--input-end--/
	
        init(num_op_dig1_1) := 0;
        init(num_op_dig2_1) := 0;
        init(num_op_dig3_1) := 0;
	
	/--initial values: user input--/
	/--middle digits--/
        init(dig1_2) := 7;
        init(dig2_2) := 9;
        init(result_2) := 4;
	
	/--copy-initial input--/
        init(dig1_2_in) := 7;
        init(dig2_2_in) := 9;
        init(result_2_in) := 4;
	/--copy-end--/
	/--input-end--/
	
        init(num_op_dig1_2) := 0;
        init(num_op_dig2_2) := 0;
        init(num_op_dig3_2) := 0;
	
	/--initial values: user input--/
	/--rightmost digits--/
        init(dig1_3) := 2;
        init(dig2_3) := 4;
        init(result_3) := 8;
	
	/--copy-initial input--/
        init(dig1_3_in) := 2;
        init(dig2_3_in) := 4;
        init(result_3_in) := 8;
	/--copy-end--/
	/--input-end--/
	
        init(num_op_dig1_3) := 0;
        init(num_op_dig2_3) := 0;
        init(num_op_dig3_3) := 0;
	
        init(state):=zeros;
	
        /--initial values: user input--/
	
        init(plus_or_minus):=minus;
        init(remove_or_add):=remove;
        init(num_allowed):=6;
	
	/--input-end--/
	
        init(legal):=dig1_1 * 100 + dig1_2 * 10 + dig1_3 * 1  - ( dig2_1 * 100 + dig2_2 * 10 + dig2_3 * 1  ) = result_1 * 100 + result_2 * 10 + result_3 * 1 & num_allowed = 0;
        init(is_sol):=dig1_1 * 100 + dig1_2 * 10 + dig1_3 * 1  - ( dig2_1 * 100 + dig2_2 * 10 + dig2_3 * 1  ) = result_1 * 100 + result_2 * 10 + result_3 * 1 & num_allowed = 0;
        
	 /--next values--/
        /--constants--/
                
        next(plus_or_minus):=plus_or_minus;
        next(num_allowed):=num_allowed;
        next(remove_or_add):=remove_or_add;
        next(dig1_1_in) := dig1_1_in;
        next(dig2_1_in) := dig2_1_in;
        next(result_1_in) := result_1_in;
        next(dig1_2_in) := dig1_2_in;
        next(dig2_2_in) := dig2_2_in;
        next(result_2_in) := result_2_in;
        next(dig1_3_in) := dig1_3_in;
        next(dig2_3_in) := dig2_3_in;
        next(result_3_in) := result_3_in;
	
        next(state) := case
        state = zeros & !is_sol: guess;
        state = zeros & legal & is_sol: correct;
        state = guess & next(is_sol): correct;
        state = guess & !next(is_sol): zeros;
        state = correct: correct;
        TRUE: zeros;
        esac;
						 
	      /--legal checks if num_op_dig1, num_op_dig2 and num_op_dig3 are legal, meaning:--/ 
            /--these values are the solution of the riddle--/ 
			
            /--or: any transformation to different dig1, dig2 and dig3 is available using num_op_dig1, num_op_dig2 and num_op_dig3--/ 
                         
            next(legal) := case
            state = guess & (num_op_dig1_1 != 0 & dig1_1=dig1_1_in | num_op_dig2_1 != 0 & dig2_1=dig2_1_in | num_op_dig3_1 != 0 & result_1=result_1_in | num_op_dig1_2 != 0 & dig1_2=dig1_2_in | num_op_dig2_2 != 0 & dig2_2=dig2_2_in | num_op_dig3_2 != 0 & result_2=result_2_in | num_op_dig1_3 != 0 & dig1_3=dig1_3_in | num_op_dig2_3 != 0 & dig2_3=dig2_3_in | num_op_dig3_3 != 0 & result_3=result_3_in ): FALSE;
            state = zeros: legal; 
            state = correct: TRUE;
            state = guess & !(num_op_dig1_1 != 0 & dig1_1=dig1_1_in | num_op_dig2_1 != 0 & dig2_1=dig2_1_in | num_op_dig3_1 != 0 & result_1=result_1_in | num_op_dig1_2 != 0 & dig1_2=dig1_2_in | num_op_dig2_2 != 0 & dig2_2=dig2_2_in | num_op_dig3_2 != 0 & result_2=result_2_in | num_op_dig1_3 != 0 & dig1_3=dig1_3_in | num_op_dig2_3 != 0 & dig2_3=dig2_3_in | num_op_dig3_3 != 0 & result_3=result_3_in ): TRUE;
            TRUE: legal;
            esac;
						 
	   /-- is_sol checks that the sum of operations done is exactly the number of allowed operations and the equation is satisfied --/
                         
             next(is_sol) := case
             state = zeros: is_sol;
             state = guess: next(legal) & num_op_dig1_1 + num_op_dig2_1 + num_op_dig3_1 + num_op_dig1_2 + num_op_dig2_2 + num_op_dig3_2 + num_op_dig1_3 + num_op_dig2_3 + num_op_dig3_3  = num_allowed & dig1_1 * 100 + dig1_2 * 10 + dig1_3 * 1  - (dig2_1 * 100 + dig2_2 * 10 + dig2_3 * 1 ) = result_1 * 100 + result_2 * 10 + result_3 * 1 ;
             state = correct: TRUE;
             TRUE: TRUE;
             esac;
                         
	/--guessing the number of operations per digit--/
       /--guessing the digits according to the transformation array constant and the number of operations per digit--/ 
                         
         	next(num_op_dig1_1) := case
                state = zeros & next(state) = guess: {0, 1, 2, 3, 4, 5};
                state = zeros & next(state) = correct: 0;
                state = guess & next(state) = correct: num_op_dig1_1;
                state = guess & next(state) = zeros: 0;
                state = correct: num_op_dig1_1;
                TRUE: {0, 1, 2, 3, 4, 5};
                esac;
                         
                next(num_op_dig2_1) := case
                state = zeros & next(state) = guess: {0, 1, 2, 3, 4, 5};
                state = zeros & next(state) = correct: 0;
                state = guess & next(state) = correct: num_op_dig2_1;
                state = guess & next(state) = zeros: 0;
                state = correct: num_op_dig2_1;
                TRUE: {0, 1, 2, 3, 4, 5};
                esac;
                         
                next(num_op_dig3_1) := case
                state = zeros & next(state) = guess: {0, 1, 2, 3, 4, 5};
                state = zeros & next(state) = correct: 0;
                state = guess & next(state) = correct: num_op_dig3_1;
                state = guess & next(state) = zeros: 0;
                state = correct: num_op_dig3_1;
                TRUE: {0, 1, 2, 3, 4, 5};
                esac;
                         
                next(dig1_1) := case
                state = zeros & next(state) = guess: arr_trans_remove[dig1_1_in][next(num_op_dig1_1)];
                state = zeros & next(state) = correct: dig1_1_in;
                state = guess & next(state) = correct: dig1_1;
                state = guess & next(state) = zeros: dig1_1_in;
                state = correct: dig1_1;
                TRUE: arr_trans_remove[dig1_1_in][next(num_op_dig1_1)];
                esac;
                         
                next(dig2_1) := case
                state = zeros & next(state) = guess: arr_trans_remove[dig2_1_in][next(num_op_dig2_1)];
                state = zeros & next(state) = correct: dig2_1_in;
                state = guess & next(state) = correct: dig2_1;
                state = guess & next(state) = zeros: dig2_1_in;
                state = correct: dig2_1;
                TRUE: arr_trans_remove[dig2_1_in][next(num_op_dig2_1)];
                esac;
                         
                next(result_1) := case
                state = zeros & next(state) = guess: arr_trans_remove[result_1_in][next(num_op_dig3_1)];
                state = zeros & next(state) = correct: result_1_in;
                state = guess & next(state) = correct: result_1;
                state = guess & next(state) = zeros: result_1_in;
                state = correct: result_1;
                TRUE: arr_trans_remove[result_1_in][next(num_op_dig3_1)];
                esac;
                         
        	next(num_op_dig1_2) := case
                state = zeros & next(state) = guess: {0, 1, 2, 3, 4, 5};
                state = zeros & next(state) = correct: 0;
                state = guess & next(state) = correct: num_op_dig1_2;
                state = guess & next(state) = zeros: 0;
                state = correct: num_op_dig1_2;
                TRUE: {0, 1, 2, 3, 4, 5};
                esac;
                         
                next(num_op_dig2_2) := case
                state = zeros & next(state) = guess: {0, 1, 2, 3, 4, 5};
                state = zeros & next(state) = correct: 0;
                state = guess & next(state) = correct: num_op_dig2_2;
                state = guess & next(state) = zeros: 0;
                state = correct: num_op_dig2_2;
                TRUE: {0, 1, 2, 3, 4, 5};
                esac;
                         
                next(num_op_dig3_2) := case
                state = zeros & next(state) = guess: {0, 1, 2, 3, 4, 5};
                state = zeros & next(state) = correct: 0;
                state = guess & next(state) = correct: num_op_dig3_2;
                state = guess & next(state) = zeros: 0;
                state = correct: num_op_dig3_2;
                TRUE: {0, 1, 2, 3, 4, 5};
                esac;
                         
                 next(dig1_2) := case
                 state = zeros & next(state) = guess: arr_trans_remove[dig1_2_in][next(num_op_dig1_2)];
                 state = zeros & next(state) = correct: dig1_2_in;
                 state = guess & next(state) = correct: dig1_2;
                 state = guess & next(state) = zeros: dig1_2_in;
                 state = correct: dig1_2;
                 TRUE: arr_trans_remove[dig1_2_in][next(num_op_dig1_2)];
                 esac;
                         
                 next(dig2_2) := case
                 state = zeros & next(state) = guess: arr_trans_remove[dig2_2_in][next(num_op_dig2_2)];
                 state = zeros & next(state) = correct: dig2_2_in;
                 state = guess & next(state) = correct: dig2_2;
		 state = guess & next(state) = zeros: dig2_2_in;
                 state = correct: dig2_2;
                 TRUE: arr_trans_remove[dig2_2_in][next(num_op_dig2_2)];
                 esac;
                         
                 next(result_2) := case
                 state = zeros & next(state) = guess: arr_trans_remove[result_2_in][next(num_op_dig3_2)];
                 state = zeros & next(state) = correct: result_2_in;
                 state = guess & next(state) = correct: result_2;
                 state = guess & next(state) = zeros: result_2_in;
                 state = correct: result_2;
                 TRUE: arr_trans_remove[result_2_in][next(num_op_dig3_2)];
                 esac;
                         
                 next(num_op_dig1_3) := case
                 state = zeros & next(state) = guess: {0, 1, 2, 3, 4, 5};
                 state = zeros & next(state) = correct: 0;
                 state = guess & next(state) = correct: num_op_dig1_3;
                 state = guess & next(state) = zeros: 0;
                 state = correct: num_op_dig1_3;
                 TRUE: {0, 1, 2, 3, 4, 5};
                 esac;
                         
                next(num_op_dig2_3) := case
                state = zeros & next(state) = guess: {0, 1, 2, 3, 4, 5};
                state = zeros & next(state) = correct: 0;
                state = guess & next(state) = correct: num_op_dig2_3;
                state = guess & next(state) = zeros: 0;
                state = correct: num_op_dig2_3;
                TRUE: {0, 1, 2, 3, 4, 5};
                esac;
                         
                next(num_op_dig3_3) := case
                state = zeros & next(state) = guess: {0, 1, 2, 3, 4, 5};
                state = zeros & next(state) = correct: 0;
                state = guess & next(state) = correct: num_op_dig3_3;
                state = guess & next(state) = zeros: 0;
                state = correct: num_op_dig3_3;
                TRUE: {0, 1, 2, 3, 4, 5};
                esac;
                         
                next(dig1_3) := case
                state = zeros & next(state) = guess: arr_trans_remove[dig1_3_in][next(num_op_dig1_3)];
                state = zeros & next(state) = correct: dig1_3_in;
                state = guess & next(state) = correct: dig1_3;
                state = guess & next(state) = zeros: dig1_3_in;
                state = correct: dig1_3;
                TRUE: arr_trans_remove[dig1_3_in][next(num_op_dig1_3)];
                esac;
                         
                next(dig2_3) := case
                state = zeros & next(state) = guess: arr_trans_remove[dig2_3_in][next(num_op_dig2_3)];
                state = zeros & next(state) = correct: dig2_3_in;
                state = guess & next(state) = correct: dig2_3;
                state = guess & next(state) = zeros: dig2_3_in;
                state = correct: dig2_3;
                TRUE: arr_trans_remove[dig2_3_in][next(num_op_dig2_3)];
                esac;         
                         
               next(result_3) := case
               state = zeros & next(state) = guess: arr_trans_remove[result_3_in][next(num_op_dig3_3)];
               state = zeros & next(state) = correct: result_3_in;
               state = guess & next(state) = correct: result_3;
               state = guess & next(state) = zeros: result_3_in;
               state = correct: result_3;
               TRUE: arr_trans_remove[result_3_in][next(num_op_dig3_3)];
               esac;
         
	 /--find a correct solution--/    
        LTLSPEC
        G ! (state=correct)
        
